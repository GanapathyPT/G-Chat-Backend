{"version":3,"sources":["layouts/AuthLayout.module.scss","components/home/SideBar.module.scss","components/loginPage/Login.module.scss","components/loginPage/Login.tsx","layouts/AuthLayout.tsx","common/tokenLocalStorage.ts","common/constants.ts","common/APIInstance.ts","common/utils.ts","services/chat/chat-utils.ts","services/chat/chat-service.tsx","services/auth/auth-services.tsx","services/auth/AuthContext.tsx","containers/login/LoginContainer.tsx","components/registerPage/Register.tsx","containers/register/RegisterContainer.tsx","components/common/AppLoader.tsx","components/common/RedirectifNeeded.tsx","components/home/ChatRoom.tsx","components/home/RoomsList.tsx","components/home/SideBar.tsx","components/home/Home.tsx","App.tsx","index.tsx","components/home/ChatRoom.module.scss","components/home/RoomsList.module.scss"],"names":["module","exports","Login","ctrlRef","onSubmit","useState","email","setEmail","password","setPassword","error","setError","loading","setLoading","onFormSubmit","a","useImperativeHandle","Form","general","className","styles","alertContainer","Label","prompt","color","Icon","name","Input","required","label","placeholder","icon","iconPosition","value","onChange","e","target","type","Button","primary","disabled","AuthLayout","heading","cardContent","extra","authContainer","Card","raised","authCard","authHeading","Token","constants","accessToken","setAccessToken","token","getApiInstance","axios","create","baseURL","timeout","headers","Authorization","setToken","tokenType","localStorage","setItem","getRandomAvatar","seed","Math","random","toString","substring","length","deepCopy","object","JSON","parse","stringify","getRoomTitle","room","currentUserId","title","users","id","username","getRoomDescription","lastMessage","getLastMessageInRoom","undefined","content","messages","getSelectedRoomAndUpdate","rooms","selectedRoomId","roomUpdate","map","getUnreadCount","lastReadMessageIndex","findIndex","message","last_read_message","addNewRoom","post","data","getRooms","get","sendNewMessage","getNewMessages","room_list","markAsRead","room_id","poller","roomsState","atom","default","key","selectedRoomState","roomListState","useChat","useRecoilState","setRooms","setRoomList","useSetRecoilState","selectedRoom","setSelectedRoom","useEffect","initialRooms","newRoomsList","last_message","selectRoom","roomsCopy","selectedRoomObj","find","addMessage","oldRooms","addRoom","deSelectRoom","registerUser","confirm_password","loginUser","getUserDetails","refreshToken","searchUser","cancelTokenSource","AuthStatus","saveTokenAndGetUserDetails","tokens","access","AcessToken","RefreshToken","refresh","AuthContext","createContext","AuthProvider","children","status","AuthenticationLoading","authInfo","setAuthInfo","contextValue","login","Authenticated","register","authenticate","info","NotAuthenticated","console","newAccessToken","getAuthActions","Provider","useAuth","useContext","LoginContainer","navigate","useNavigate","formControlRef","useRef","current","to","Register","setUsername","RegisterContainer","errorControlRef","response","AppLoader","Dimmer","active","inverted","Loader","RedirectifNeeded","element","loggedIn","replace","ChatList","memo","chatMessage","author","ourMessage","prevMessages","newMessages","ChatRoom","bottomRef","newMessage","setNewMessage","scrollIntoView","GridColumn","computer","mobile","Segment","chatRoomContainer","backButton","size","onClick","messagesContainer","ref","autoFocus","onKeyPress","charCode","labelPosition","RoomsList","List","animated","celled","unreadCount","Item","style","padding","roomItem","profilePic","Image","avatar","src","Content","Header","Description","description","unreadCountContainer","floating","circular","SideBar","searchText","setSearchText","searchLoading","setSearchLoading","searchResult","setSearchResult","getUsers","query","cancel","CancelToken","source","filter","user","onSearchChange","onResultSelect","event","result","newRoom","useUserSearch","sideBarContainer","textAlign","searchBarContainer","Search","results","Dropdown","simple","direction","Menu","Home","roomList","useRecoilValue","setInterval","Object","values","some","keys","forEach","roomId","parseInt","roomIndex","push","clearInterval","useChatPoller","Grid","columns","divided","GridRow","App","getItem","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d19a7ede.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"authContainer\":\"AuthLayout_authContainer__lyNfd\",\"authHeading\":\"AuthLayout_authHeading__1_lfe\",\"authCard\":\"AuthLayout_authCard__c-7Cw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sideBarContainer\":\"SideBar_sideBarContainer__R9HZo\",\"searchBarContainer\":\"SideBar_searchBarContainer__35kPV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alertContainer\":\"Login_alertContainer__2EguZ\"};","import { MutableRefObject, useImperativeHandle, useState } from \"react\";\nimport { Button, Form, Icon, Label } from \"semantic-ui-react\";\nimport styles from \"./Login.module.scss\";\ninterface Props {\n  ctrlRef: MutableRefObject<\n    | {\n        setError: (errors: Record<string, string>) => void;\n        setLoading: (loading: boolean) => void;\n      }\n    | undefined\n  >;\n  onSubmit: (email: string, password: string) => void;\n}\n\nfunction Login({ ctrlRef, onSubmit }: Props) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState<Record<string, string>>({});\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const onFormSubmit = async () => {\n    setPassword(\"\");\n    await onSubmit(email, password);\n  };\n\n  useImperativeHandle(\n    ctrlRef,\n    () => ({\n      setError,\n      setLoading,\n    }),\n    []\n  );\n\n  return (\n    <Form onSubmit={onFormSubmit}>\n      {error.general ? (\n        <div className={styles.alertContainer}>\n          <Label prompt color=\"red\">\n            <Icon name=\"exclamation circle\" />\n            {error.general}\n          </Label>\n        </div>\n      ) : null}\n      <Form.Input\n        required\n        label=\"Email\"\n        placeholder=\"email\"\n        icon=\"mail\"\n        iconPosition=\"left\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n      />\n      <Form.Input\n        required\n        label=\"Password\"\n        placeholder=\"password\"\n        type=\"password\"\n        icon=\"key\"\n        iconPosition=\"left\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      <Button type=\"submit\" primary loading={loading} disabled={loading}>\n        Sign In\n      </Button>\n    </Form>\n  );\n}\n\nexport { Login };\n","import { ReactNode } from \"react\";\nimport { Card } from \"semantic-ui-react\";\nimport styles from \"./AuthLayout.module.scss\";\n\ninterface Props {\n  heading: string;\n  cardContent: ReactNode;\n  extra?: ReactNode;\n}\n\nfunction AuthLayout({ heading, cardContent, extra }: Props) {\n  return (\n    <div className={styles.authContainer}>\n      <Card color=\"blue\" raised>\n        <div className={styles.authCard}>\n          <h2 className={styles.authHeading}>{heading}</h2>\n          {cardContent}\n        </div>\n      </Card>\n\n      <small>{extra}</small>\n    </div>\n  );\n}\n\nexport { AuthLayout };\n","export enum Token {\n  AcessToken = \"ACCESS_TOKEN\",\n  RefreshToken = \"REFRESH_TOKEN\",\n}\n\nexport const setToken = (tokenType: Token, token: string) => {\n  localStorage.setItem(tokenType, token);\n};\n\nexport const removeToken = (tokenType: Token) => {\n  localStorage.removeItem(tokenType);\n};\n\nexport const getToken = (tokenType: Token): string | null => {\n  return localStorage.getItem(tokenType);\n};\n","export const constants = {\n  baseURL: \"/api/\",\n};\n","import axios from \"axios\";\nimport { constants } from \"./constants\";\n\nlet accessToken = \"\";\n\nexport const setAccessToken = (token: string) => {\n  accessToken = token;\n};\n\nexport const removeAccessToken = (token: string) => {\n  accessToken = \"\";\n};\n\nexport const getApiInstance = () =>\n  axios.create({\n    baseURL: constants.baseURL,\n    timeout: 5000,\n    headers: accessToken\n      ? {\n          Authorization: `Bearer ${accessToken}`,\n        }\n      : {},\n  });\n","export function getRandomString(length?: number) {\n  const randomString = (Math.random() + 1)\n    .toString(36)\n    .substring(length ? length : 7);\n  return randomString;\n}\n\nexport function getRandomAvatar(seed?: string) {\n  return `https://avatars.dicebear.com/api/avataaars/${\n    seed ? seed : getRandomString()\n  }.svg`;\n}\n\nexport function deepCopy(object: Object): any {\n  return JSON.parse(JSON.stringify(object));\n}\n","import { deepCopy } from \"../../common/utils\";\nimport { Message, Room } from \"./chat-service\";\n\nexport function getRoomTitle(room: Room, currentUserId?: number) {\n  if (room.title !== null) return room.title;\n\n  const userId = room.users[0].id;\n  if (userId === currentUserId) return room.users[1].username;\n\n  return room.users[0].username;\n}\n\nexport function getRoomDescription(room: Room) {\n  const lastMessage = getLastMessageInRoom(room);\n  if (lastMessage === undefined) return \"Tap to start the conversation\";\n  return lastMessage.content;\n}\n\nexport function getLastMessageInRoom(room: Room): Message | undefined {\n  if (room.messages.length === 0) return;\n  const lastMessage = room.messages[room.messages.length - 1];\n  return lastMessage;\n}\n\nexport function getSelectedRoomAndUpdate(\n  rooms: Room[],\n  selectedRoomId: number,\n  roomUpdate: (room: Room) => Room\n) {\n  return rooms.map((room) =>\n    room.id === selectedRoomId\n      ? {\n          ...room,\n          ...roomUpdate(deepCopy(room)),\n        }\n      : room\n  );\n}\n\nexport function getUnreadCount(room: Room): number {\n  if (room.messages.length === 0) return 0;\n  const lastReadMessageIndex = room.messages.findIndex(\n    (message) => message.id === room.last_read_message\n  );\n  return room.messages.length - lastReadMessageIndex - 1;\n}\n","import { useEffect } from \"react\";\nimport {\n  atom,\n  useRecoilState,\n  useRecoilValue,\n  useSetRecoilState,\n} from \"recoil\";\nimport { getApiInstance } from \"../../common/APIInstance\";\nimport { deepCopy } from \"../../common/utils\";\nimport { AuthStatus, useAuth } from \"../auth/AuthContext\";\nimport { getLastMessageInRoom, getSelectedRoomAndUpdate } from \"./chat-utils\";\n\nconst POLLER_INTERVAL = 1000;\n\nexport interface User {\n  id: number;\n  username: string;\n  email: string;\n}\n\nexport interface Message {\n  id: number;\n  author: number;\n  content: string;\n}\n\nexport interface Room {\n  id: number;\n  title: string | null;\n  users: User[];\n  messages: Message[];\n  last_read_message: number;\n}\n\ninterface RoomList {\n  room_id: number;\n  last_message: number;\n}\n\nexport async function addNewRoom(users: number[]): Promise<Room> {\n  return (\n    await getApiInstance().post(\"chat/add_room/\", {\n      users,\n    })\n  ).data;\n}\n\nasync function getRooms(): Promise<Room[]> {\n  return (await getApiInstance().get(\"chat/rooms/\")).data;\n}\n\nasync function sendNewMessage(content: string, room: number) {\n  return (\n    await getApiInstance().post(\"chat/new_message/\", {\n      content,\n      room,\n    })\n  ).data;\n}\n\nasync function getNewMessages(\n  room_list: RoomList[]\n): Promise<Record<number, Message[]>> {\n  return (await getApiInstance().post(\"chat/get_new_messages/\", { room_list }))\n    .data;\n}\n\nasync function markAsRead(room_id: number, last_read_message: number) {\n  return (\n    await getApiInstance().post(\"chat/mark_as_read/\", {\n      room_id,\n      last_read_message,\n    })\n  ).data;\n}\n\nconst roomsState = atom<Room[]>({\n  default: [],\n  key: \"rooms\",\n});\n\nconst selectedRoomState = atom<number | undefined>({\n  default: undefined,\n  key: \"selectedRoom\",\n});\n\nconst roomListState = atom<RoomList[]>({\n  default: [],\n  key: \"roomList\",\n});\n\nexport function useChat() {\n  const [rooms, setRooms] = useRecoilState(roomsState);\n  const setRoomList = useSetRecoilState(roomListState);\n  const [selectedRoom, setSelectedRoom] = useRecoilState(selectedRoomState);\n\n  useEffect(() => {\n    (async () => {\n      const initialRooms = await getRooms();\n      setRooms(initialRooms);\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const newRoomsList: RoomList[] = rooms.map((room) => {\n      const lastMessage = getLastMessageInRoom(room);\n      return {\n        room_id: room.id,\n        last_message: lastMessage !== undefined ? lastMessage.id : -1,\n      };\n    });\n    setRoomList(newRoomsList);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [rooms]);\n\n  const selectRoom = async (selectedRoomId: number) => {\n    setSelectedRoom(selectedRoomId);\n\n    const roomsCopy: Room[] = getSelectedRoomAndUpdate(\n      rooms,\n      selectedRoomId,\n      (room) => {\n        const lastMessage = getLastMessageInRoom(room);\n        return {\n          ...room,\n          last_read_message: lastMessage !== undefined ? lastMessage.id : -1,\n        };\n      }\n    );\n    setRooms(roomsCopy);\n    const selectedRoomObj = roomsCopy.find(\n      (room) => room.id === selectedRoomId\n    );\n    if (\n      selectedRoomObj === undefined ||\n      selectedRoomObj.last_read_message === -1\n    )\n      return;\n    await markAsRead(selectedRoomId, selectedRoomObj.last_read_message);\n  };\n\n  const deSelectRoom = () => {\n    setSelectedRoom(undefined);\n  };\n\n  const addMessage = async (message: string) => {\n    if (selectedRoom === undefined) return;\n\n    // let's not update locally\n    // let's get the message from poller\n    const { id } = await sendNewMessage(message, selectedRoom);\n    // but need to change the last read message in rooms array\n    setRooms((oldRooms) =>\n      getSelectedRoomAndUpdate(oldRooms, selectedRoom, (room) => ({\n        ...room,\n        last_read_message: id,\n      }))\n    );\n  };\n\n  const addRoom = (room: Room) => {\n    setRooms((oldRooms) => [...oldRooms, room]);\n    setSelectedRoom(room.id);\n  };\n\n  return {\n    rooms,\n    selectedRoom: rooms.find((room) => room.id === selectedRoom),\n    selectRoom,\n    addRoom,\n    deSelectRoom,\n    addMessage,\n  };\n}\n\nlet poller: any;\n\nexport function useChatPoller() {\n  const { status } = useAuth();\n  const setRooms = useSetRecoilState(roomsState);\n  const roomList = useRecoilValue(roomListState);\n\n  useEffect(() => {\n    if (status === AuthStatus.Authenticated && roomList.length > 0) {\n      poller = setInterval(async () => {\n        // get new messages for all the rooms\n        const newMessages = await getNewMessages(roomList);\n        // if no new messages are there do nothing\n        if (!Object.values(newMessages).some((room) => room.length > 0)) return;\n\n        setRooms((rooms) => {\n          const oldRooms: Room[] = deepCopy(rooms);\n          Object.keys(newMessages).forEach((key) => {\n            const roomId = parseInt(key);\n            // no new messages for the room\n            if (newMessages[roomId].length === 0) return;\n\n            // get the index of room in rooms array\n            const roomIndex = oldRooms.findIndex((room) => room.id === roomId);\n            // push the new messages to the messages array of rooms\n            oldRooms[roomIndex].messages.push(...newMessages[roomId]);\n            // these message are not yet read\n            // so don't need to change the last_read_message in rooms\n          });\n          return oldRooms;\n        });\n      }, POLLER_INTERVAL);\n      return () => clearInterval(poller);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [status, roomList]);\n}\n","import axios, { CancelTokenSource } from \"axios\";\nimport { Dispatch, MouseEvent, SetStateAction, useState } from \"react\";\nimport { SearchProps, SearchResultData } from \"semantic-ui-react\";\nimport { getApiInstance, setAccessToken } from \"../../common/APIInstance\";\nimport { setToken, Token } from \"../../common/tokenLocalStorage\";\nimport { addNewRoom, useChat, User } from \"../chat/chat-service\";\nimport { AuthActions, AuthInfo, AuthStatus, useAuth } from \"./AuthContext\";\n\ninterface TokenReponse {\n  access: string;\n  refresh: string;\n}\n\nasync function registerUser(\n  username: string,\n  email: string,\n  password: string\n): Promise<TokenReponse> {\n  return (\n    await getApiInstance().post(\"auth/register/\", {\n      username,\n      email,\n      password,\n      confirm_password: password,\n    })\n  ).data;\n}\n\nasync function loginUser(\n  email: string,\n  password: string\n): Promise<TokenReponse> {\n  return (\n    await getApiInstance().post(\"auth/token/\", {\n      email,\n      password,\n    })\n  ).data;\n}\n\nasync function getUserDetails(): Promise<AuthInfo> {\n  return (await getApiInstance().get(\"auth/me/\")).data;\n}\n\nasync function refreshToken(): Promise<Omit<TokenReponse, \"refresh\">> {\n  return (await getApiInstance().get(\"auth/refresh/\")).data;\n}\n\nasync function searchUser(username: string): Promise<User[]> {\n  return (await getApiInstance().get(`auth/search?username=${username}`)).data;\n}\n\n// as we do same for both login and register for now\n// writing a single function to pass it there\nconst saveTokenAndGetUserDetails = async (\n  tokens: TokenReponse\n): Promise<AuthInfo> => {\n  // for further querying\n  setAccessToken(tokens.access);\n\n  // for storing login session\n  setToken(Token.AcessToken, tokens.access);\n  setToken(Token.RefreshToken, tokens.refresh);\n\n  return await getUserDetails();\n};\n\nexport const getAuthActions = (\n  setAuthInfo: Dispatch<SetStateAction<AuthInfo>>\n): AuthActions => ({\n  login: async (email: string, password: string) => {\n    const tokens = await loginUser(email, password);\n    const authInfo = await saveTokenAndGetUserDetails(tokens);\n    setAuthInfo({ ...authInfo, status: AuthStatus.Authenticated });\n  },\n  register: async (username: string, email: string, password: string) => {\n    const tokens = await registerUser(username, email, password);\n    const authInfo = await saveTokenAndGetUserDetails(tokens);\n    setAuthInfo({ ...authInfo, status: AuthStatus.Authenticated });\n  },\n  authenticate: async (accessToken: string | null) => {\n    if (accessToken === null) {\n      setAuthInfo((info) => ({ ...info, status: AuthStatus.NotAuthenticated }));\n      return;\n    }\n    try {\n      setAuthInfo((info) => ({\n        ...info,\n        status: AuthStatus.AuthenticationLoading,\n      }));\n      setAccessToken(accessToken);\n      const authInfo = await getUserDetails();\n      setAuthInfo({ ...authInfo, status: AuthStatus.Authenticated });\n    } catch (err) {\n      console.error(err);\n      try {\n        // access token may be expired so refresh and try again once more\n        const newAccessToken = await refreshToken();\n        setAccessToken(newAccessToken.access);\n        const authInfo = await getUserDetails();\n        setAuthInfo({ ...authInfo, status: AuthStatus.Authenticated });\n      } catch (err) {\n        console.error(err);\n        // if we still get error\n        // refresh token is not valid\n        setAuthInfo((info) => ({\n          ...info,\n          status: AuthStatus.NotAuthenticated,\n        }));\n      }\n    }\n  },\n});\n\n// cancel token storage\nlet cancelTokenSource: CancelTokenSource | undefined;\n\ninterface SearchResult {\n  id: number;\n  title: string;\n  description: string;\n}\n\nexport function useUserSearch() {\n  const { id } = useAuth();\n  const { addRoom } = useChat();\n  const [searchText, setSearchText] = useState<string>(\"\");\n  const [searchLoading, setSearchLoading] = useState<boolean>(false);\n  const [searchResult, setSearchResult] = useState<SearchResult[]>([]);\n\n  const getUsers = async (query: string): Promise<SearchResult[]> => {\n    // if already a request is there cancel it\n    if (cancelTokenSource !== undefined) cancelTokenSource.cancel();\n\n    cancelTokenSource = axios.CancelToken.source();\n    const users = await searchUser(query);\n    return users\n      .filter((user) => user.id !== id)\n      .map((user) => ({\n        id: user.id,\n        title: user.username,\n        description: user.email,\n      }));\n  };\n\n  const onSearchChange = async (\n    e: MouseEvent<HTMLElement>,\n    data: SearchProps\n  ) => {\n    if (data.value) {\n      setSearchText(data.value);\n      setSearchLoading(true);\n      const users = await getUsers(data.value);\n      setSearchResult(users);\n      setSearchLoading(false);\n    } else setSearchText(\"\");\n  };\n\n  const onResultSelect = async (\n    event: MouseEvent<HTMLDivElement>,\n    data: SearchResultData\n  ) => {\n    const user = data.result.id as number;\n    const newRoom = await addNewRoom([user]);\n    addRoom(newRoom);\n    setSearchResult([]);\n    setSearchText(\"\");\n  };\n\n  return {\n    onSearchChange,\n    onResultSelect,\n    searchLoading,\n    searchResult,\n    searchText,\n  };\n}\n","import { createContext, ReactChild, useContext, useState } from \"react\";\nimport { getAuthActions } from \"./auth-services\";\n\nexport enum AuthStatus {\n  NotAuthenticated = \"NOT_AUTHENTICATED\",\n  Authenticated = \"AUTHENTICATED\",\n  AuthenticationLoading = \"AUTHENTICATION_LOADING\",\n}\nexport interface AuthInfo {\n  id?: number;\n  username?: string;\n  email?: string;\n  status: AuthStatus;\n}\n\nexport interface AuthActions {\n  register: (\n    username: string,\n    email: string,\n    password: string\n  ) => Promise<void>;\n  login: (email: string, password: string) => Promise<void>;\n  authenticate: (accessToken: string | null) => Promise<void>;\n}\n\nexport type AuthContextType = AuthInfo & AuthActions;\n\nconst AuthContext = createContext<AuthContextType>({} as any);\n\nexport const AuthProvider = ({ children }: { children: ReactChild }) => {\n  const [authInfo, setAuthInfo] = useState<AuthInfo>({\n    status: AuthStatus.AuthenticationLoading,\n  });\n\n  const contextValue: AuthContextType = {\n    ...authInfo,\n    ...getAuthActions(setAuthInfo),\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>{children}</AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n","import { useRef } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { Login } from \"../../components/loginPage/Login\";\nimport { AuthLayout } from \"../../layouts/AuthLayout\";\nimport { useAuth } from \"../../services/auth/AuthContext\";\n\nfunction LoginContainer() {\n  const { login } = useAuth();\n  const navigate = useNavigate();\n  const formControlRef = useRef<{\n    setError: (errors: Record<string, string>) => void;\n    setLoading: (loading: boolean) => void;\n  }>();\n\n  const loginUser = async (email: string, password: string) => {\n    try {\n      formControlRef.current?.setLoading(true);\n      formControlRef.current?.setError({});\n      await login(email, password);\n      navigate(\"/\");\n    } catch (err) {\n      formControlRef.current?.setError({ general: \"Invalid Credentials\" });\n      console.error(err);\n    } finally {\n      formControlRef.current?.setLoading(false);\n    }\n  };\n\n  return (\n    <AuthLayout\n      heading=\"Login\"\n      cardContent={<Login ctrlRef={formControlRef} onSubmit={loginUser} />}\n      extra={\n        <>\n          Don't have an account? <Link to=\"/register\">Register</Link>\n        </>\n      }\n    />\n  );\n}\n\nexport { LoginContainer };\n","import { MutableRefObject, useImperativeHandle, useState } from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\n\ninterface Props {\n  ctrlRef: MutableRefObject<\n    | {\n        setError: (error: Record<string, string>) => void;\n        setLoading: (loading: boolean) => void;\n      }\n    | undefined\n  >;\n  onSubmit: (username: string, email: string, password: string) => void;\n}\n\nfunction Register({ ctrlRef, onSubmit }: Props) {\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState<Record<string, string>>({});\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const onFormSubmit = async () => {\n    setPassword(\"\");\n    await onSubmit(username, email, password);\n  };\n\n  useImperativeHandle(\n    ctrlRef,\n    () => ({\n      setError,\n      setLoading,\n    }),\n    []\n  );\n\n  return (\n    <Form onSubmit={onFormSubmit}>\n      <Form.Input\n        required\n        label=\"UserName\"\n        placeholder=\"username\"\n        icon=\"user\"\n        iconPosition=\"left\"\n        value={username}\n        onChange={(e) => setUsername(e.target.value)}\n        error={error.username}\n      />\n      <Form.Input\n        required\n        label=\"Email\"\n        placeholder=\"email\"\n        icon=\"mail\"\n        iconPosition=\"left\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        error={error.email}\n      />\n      <Form.Input\n        required\n        label=\"Password\"\n        placeholder=\"password\"\n        type=\"password\"\n        icon=\"key\"\n        iconPosition=\"left\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        error={error.password}\n      />\n      <Button type=\"submit\" primary loading={loading} disabled={loading}>\n        Sign Up\n      </Button>\n    </Form>\n  );\n}\n\nexport { Register };\n","import { useRef } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { Register } from \"../../components/registerPage/Register\";\nimport { AuthLayout } from \"../../layouts/AuthLayout\";\nimport { useAuth } from \"../../services/auth/AuthContext\";\n\nfunction RegisterContainer() {\n  const { register } = useAuth();\n  const navigate = useNavigate();\n  const errorControlRef = useRef<{\n    setError: (error: Record<string, string>) => void;\n    setLoading: (loading: boolean) => void;\n  }>();\n\n  const registerUser = async (\n    username: string,\n    email: string,\n    password: string\n  ) => {\n    try {\n      errorControlRef.current?.setLoading(true);\n      errorControlRef.current?.setError({});\n      await register(username, email, password);\n      navigate(\"/\");\n    } catch (err) {\n      errorControlRef.current?.setError((err as any).response.data);\n      console.error(err);\n    } finally {\n      errorControlRef.current?.setLoading(false);\n    }\n  };\n\n  return (\n    <AuthLayout\n      heading=\"Register\"\n      cardContent={\n        <Register ctrlRef={errorControlRef} onSubmit={registerUser} />\n      }\n      extra={\n        <>\n          Already have an account? <Link to=\"/login\">Login</Link>\n        </>\n      }\n    />\n  );\n}\n\nexport { RegisterContainer };\n","import { Dimmer, Loader } from \"semantic-ui-react\";\n\nfunction AppLoader() {\n  return (\n    <Dimmer active inverted>\n      <Loader />\n    </Dimmer>\n  );\n}\n\nexport { AppLoader };\n","import { Navigate } from \"react-router\";\nimport { AuthStatus, useAuth } from \"../../services/auth/AuthContext\";\n\ninterface Props {\n  element: JSX.Element;\n  loggedIn?: boolean;\n}\n\nfunction RedirectifNeeded({ element, loggedIn }: Props) {\n  const { status } = useAuth();\n\n  if (status === AuthStatus.Authenticated) {\n    if (loggedIn === true) return element;\n    else return <Navigate replace to=\"/\" />;\n  } else if (status === AuthStatus.NotAuthenticated) {\n    if (loggedIn !== true) return element;\n    else return <Navigate replace to=\"/login\" />;\n  }\n\n  // never gonna hit here but for ts\n  return <Navigate replace to=\"/login\" />;\n}\n\nexport { RedirectifNeeded };\n","import { memo, useEffect, useRef, useState } from \"react\";\nimport { Button, GridColumn, Icon, Input, Segment } from \"semantic-ui-react\";\nimport { useAuth } from \"../../services/auth/AuthContext\";\nimport { Message, useChat } from \"../../services/chat/chat-service\";\n\nimport styles from \"./ChatRoom.module.scss\";\n\nconst ChatList = memo(\n  ({ messages }: { messages: Message[] }) => {\n    const { id } = useAuth();\n    return (\n      <>\n        {messages.map((message) => (\n          <p\n            key={message.id}\n            className={`${styles.chatMessage} ${\n              message.author === id ? styles.ourMessage : \"\"\n            }`}\n          >\n            <span>\n              {message.content}\n              {/* <small>{getTime(message.createdAt)}</small> */}\n            </span>\n          </p>\n        ))}\n      </>\n    );\n  },\n  ({ messages: prevMessages }, { messages: newMessages }) =>\n    prevMessages.length === newMessages.length &&\n    prevMessages[prevMessages.length - 1] ===\n      newMessages[newMessages.length - 1]\n);\n\nfunction ChatRoom() {\n  const bottomRef = useRef<HTMLDivElement>(null);\n  const { selectedRoom, deSelectRoom, addMessage } = useChat();\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  useEffect(() => {\n    if (bottomRef.current !== null) {\n      bottomRef.current.scrollIntoView();\n    }\n  }, [selectedRoom, selectedRoom?.messages]);\n\n  if (selectedRoom === undefined) return null;\n  return (\n    <GridColumn computer={12} mobile={16}>\n      <Segment className={styles.chatRoomContainer}>\n        <Icon\n          className={styles.backButton}\n          name=\"arrow left\"\n          size=\"big\"\n          onClick={deSelectRoom}\n        />\n        <div className={styles.messagesContainer}>\n          <ChatList messages={selectedRoom.messages} />\n          <div ref={bottomRef} />\n        </div>\n        <Input\n          autoFocus\n          value={newMessage}\n          onKeyPress={(e: any) => {\n            if (e.charCode === 13) {\n              addMessage(e.target.value);\n              setNewMessage(\"\");\n            }\n          }}\n          onChange={(e) => setNewMessage(e.target.value)}\n          label={\n            <Button\n              primary\n              icon\n              active\n              onClick={() => {\n                addMessage(newMessage);\n                setNewMessage(\"\");\n              }}\n            >\n              <Icon name=\"send\" />\n            </Button>\n          }\n          labelPosition=\"right\"\n          placeholder=\"Type anything . . .\"\n        />\n      </Segment>\n    </GridColumn>\n  );\n}\n\nexport { ChatRoom };\n","import { Image, Label, List } from \"semantic-ui-react\";\nimport { getRandomAvatar } from \"../../common/utils\";\nimport { useAuth } from \"../../services/auth/AuthContext\";\nimport { useChat } from \"../../services/chat/chat-service\";\nimport {\n  getRoomDescription,\n  getRoomTitle,\n  getUnreadCount,\n} from \"../../services/chat/chat-utils\";\n\nimport styles from \"./RoomsList.module.scss\";\n\nfunction RoomsList() {\n  const { id } = useAuth();\n  const { rooms, selectedRoom, selectRoom } = useChat();\n\n  return (\n    <List animated celled size=\"big\">\n      {rooms.map((room) => {\n        const unreadCount = getUnreadCount(room);\n\n        return (\n          <List.Item\n            key={room.id}\n            onClick={() => selectRoom(room.id)}\n            style={{ padding: 0 }}\n          >\n            <div className={room.id === selectedRoom?.id ? styles.active : \"\"}>\n              <div className={styles.roomItem}>\n                <div className={styles.profilePic}>\n                  <Image avatar src={getRandomAvatar(`${room.id}_${id}`)} />\n                </div>\n                <List.Content>\n                  <List.Header>{getRoomTitle(room, id)}</List.Header>\n                  <List.Description>\n                    <p className={styles.description}>\n                      {getRoomDescription(room)}\n                    </p>\n                  </List.Description>\n                  {/* not showing count on selected room (hacky fix) */}\n                  {unreadCount !== 0 && selectedRoom?.id !== room.id ? (\n                    <div className={styles.unreadCountContainer}>\n                      <Label color=\"red\" floating circular>\n                        {getUnreadCount(room)}\n                      </Label>\n                    </div>\n                  ) : null}\n                </List.Content>\n              </div>\n            </div>\n          </List.Item>\n        );\n      })}\n    </List>\n  );\n}\n\nexport { RoomsList };\n","import { Dropdown, GridColumn, Header, Search } from \"semantic-ui-react\";\nimport { useUserSearch } from \"../../services/auth/auth-services\";\nimport { RoomsList } from \"./RoomsList\";\n\nimport styles from \"./SideBar.module.scss\";\n\nfunction SideBar() {\n  const {\n    onResultSelect,\n    onSearchChange,\n    searchLoading,\n    searchResult,\n    searchText,\n  } = useUserSearch();\n\n  return (\n    <GridColumn computer={4} mobile={16}>\n      <div className={styles.sideBarContainer}>\n        <Header textAlign=\"center\" size=\"huge\">\n          G Chat\n        </Header>\n        <div className={styles.searchBarContainer}>\n          <Search\n            placeholder=\"Search User . . .\"\n            loading={searchLoading}\n            onResultSelect={onResultSelect}\n            onSearchChange={onSearchChange}\n            results={searchResult}\n            value={searchText}\n          />\n          <Dropdown simple direction=\"left\" icon=\"ellipsis vertical\">\n            <Dropdown.Menu>\n              <Dropdown.Item>Logout</Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n        </div>\n        <RoomsList />\n      </div>\n    </GridColumn>\n  );\n}\n\nexport { SideBar };\n","import { Grid, GridRow } from \"semantic-ui-react\";\nimport { useChatPoller } from \"../../services/chat/chat-service\";\nimport { ChatRoom } from \"./ChatRoom\";\nimport { SideBar } from \"./SideBar\";\n\nfunction Home() {\n  useChatPoller();\n\n  return (\n    <Grid columns=\"two\" divided>\n      <GridRow>\n        <SideBar />\n        <ChatRoom />\n      </GridRow>\n    </Grid>\n  );\n}\n\nexport { Home };\n","import \"semantic-ui-css/semantic.min.css\";\nimport { Route, Routes, BrowserRouter as Router } from \"react-router-dom\";\nimport { LoginContainer } from \"./containers/login/LoginContainer\";\nimport { RegisterContainer } from \"./containers/register/RegisterContainer\";\nimport { useEffect } from \"react\";\nimport { getToken, Token } from \"./common/tokenLocalStorage\";\nimport { AuthStatus, useAuth } from \"./services/auth/AuthContext\";\nimport { AppLoader } from \"./components/common/AppLoader\";\nimport { RedirectifNeeded } from \"./components/common/RedirectifNeeded\";\nimport { Home } from \"./components/home/Home\";\n\nfunction App() {\n  const { authenticate, status } = useAuth();\n\n  useEffect(() => {\n    const token = getToken(Token.AcessToken);\n    authenticate(token);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (status === AuthStatus.AuthenticationLoading) return <AppLoader />;\n\n  return (\n    <Router>\n      <Routes>\n        <Route\n          path=\"/login\"\n          element={<RedirectifNeeded element={<LoginContainer />} />}\n        />\n        <Route\n          path=\"/register\"\n          element={<RedirectifNeeded element={<RegisterContainer />} />}\n        />\n        <Route\n          path=\"/\"\n          element={<RedirectifNeeded element={<Home />} loggedIn />}\n        />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport App from \"./App\";\nimport { AuthProvider } from \"./services/auth/AuthContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <AuthProvider>\n        <App />\n      </AuthProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatRoomContainer\":\"ChatRoom_chatRoomContainer__ChMZ0\",\"backButton\":\"ChatRoom_backButton__2eVk_\",\"messagesContainer\":\"ChatRoom_messagesContainer__1A1r9\",\"chatMessage\":\"ChatRoom_chatMessage__237QU\",\"ourMessage\":\"ChatRoom_ourMessage__383Bd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"roomItem\":\"RoomsList_roomItem__2X1gb\",\"active\":\"RoomsList_active__2zITE\",\"profilePic\":\"RoomsList_profilePic__bFvVP\",\"description\":\"RoomsList_description__3Njkr\",\"unreadCountContainer\":\"RoomsList_unreadCountContainer__2Um04\"};"],"sourceRoot":""}