{"version":3,"sources":["components/home/SideBar.module.scss","layouts/AuthLayout.module.scss","components/loginPage/Login.module.scss","components/loginPage/Login.tsx","layouts/AuthLayout.tsx","common/tokenLocalStorage.ts","common/constants.ts","common/APIInstance.ts","common/utils.ts","services/chat/chat-utils.ts","services/chat/chat-service.tsx","services/auth/auth-services.tsx","services/auth/AuthContext.tsx","containers/login/LoginContainer.tsx","components/registerPage/Register.tsx","containers/register/RegisterContainer.tsx","components/common/AppLoader.tsx","components/common/RedirectifNeeded.tsx","components/home/ChatRoom.tsx","services/service-worker/add2hs-service.tsx","components/home/RoomsList.tsx","components/home/SideBar.tsx","components/home/Home.tsx","containers/home/HomeContainer.tsx","services/service-worker/service-worker-service.tsx","App.tsx","index.tsx","components/home/RoomsList.module.scss","components/home/ChatRoom.module.scss"],"names":["module","exports","Login","ctrlRef","onSubmit","useState","email","setEmail","password","setPassword","error","setError","loading","setLoading","onFormSubmit","a","useImperativeHandle","Form","general","className","styles","alertContainer","Label","prompt","color","Icon","name","Input","required","label","type","inputmode","placeholder","icon","iconPosition","value","onChange","e","target","Button","primary","disabled","AuthLayout","heading","cardContent","extra","authContainer","Card","raised","authCard","authHeading","Token","constants","accessToken","setAccessToken","token","getApiInstance","axios","create","baseURL","timeout","headers","Authorization","setToken","tokenType","localStorage","setItem","removeToken","removeItem","getToken","getItem","getRandomAvatar","seed","Math","random","toString","substring","length","deepCopy","object","JSON","parse","stringify","getRoomTitle","room","currentUserId","title","users","id","username","getRoomDescription","lastMessage","getLastMessageInRoom","undefined","content","messages","getSelectedRoomAndUpdate","rooms","selectedRoomId","roomUpdate","map","getUnreadCount","lastReadMessageIndex","findIndex","message","last_read_message","sortRoomsByUnreadCount","unreadCount","sort","room1","room2","addNewRoom","post","data","getRooms","get","sendNewMessage","getNewMessages","room_list","markAsRead","room_id","poller","roomsFetched","roomsState","atom","default","key","selectedRoomState","roomListState","useChat","useRecoilState","setRooms","setRoomList","useSetRecoilState","selectedRoom","setSelectedRoom","useEffect","initialRooms","newRoomsList","last_message","selectRoom","useCallback","roomsCopy","selectedRoomObj","find","deSelectRoom","addMessage","oldRooms","addRoom","getRoomIfAlreadyThere","userId","some","user","resetStates","registerUser","confirm_password","loginUser","getUserDetails","refreshToken","refresh","searchUser","cancelTokenSource","AuthStatus","saveTokenAndGetUserDetails","tokens","access","AcessToken","RefreshToken","AuthContext","createContext","AuthProvider","children","status","AuthenticationLoading","authInfo","setAuthInfo","contextValue","login","Authenticated","register","authenticate","info","NotAuthenticated","console","newAccessToken","logout","getAuthActions","Provider","useAuth","useContext","LoginContainer","navigate","useNavigate","formControlRef","useRef","current","to","Register","setUsername","RegisterContainer","errorControlRef","response","AppLoader","Dimmer","active","inverted","Loader","RedirectifNeeded","element","loggedIn","replace","EmptyChatRoom","emptyChatRoomContainer","Header","as","Subheader","ChatList","memo","chatMessage","author","ourMessage","prevMessages","newMessages","ChatRoom","bottomRef","newMessage","setNewMessage","scrollIntoView","GridColumn","computer","mobile","Segment","chatRoomContainer","backButton","size","onClick","messagesContainer","ref","autoFocus","onKeyPress","charCode","labelPosition","EmptyRoomsList","emptyListContainer","UnreadCountLabel","count","hidden","unreadCountContainer","floating","circular","RoomsList","List","animated","celled","roomsList","Item","style","padding","roomItem","profilePic","Image","avatar","src","Content","Description","description","Add2HSButton","isPromptVisible","setIsPromptVisible","savePromptEvent","event","preventDefault","window","addEventListener","removeEventListener","removePromptEvent","showPrompt","userChoice","outcome","useA2HSButton","Dropdown","DropDownOptions","simple","direction","Menu","SideBar","searchText","setSearchText","searchLoading","setSearchLoading","searchResult","setSearchResult","getUsers","query","cancel","CancelToken","source","filter","onSearchChange","onResultSelect","result","newRoom","useUserSearch","sideBarContainer","headerContainer","headerLogo","Search","results","Home","Grid","columns","divided","GridRow","HomeContainer","roomList","useRecoilValue","setInterval","Object","values","keys","forEach","roomId","parseInt","roomIndex","push","clearInterval","useChatPoller","navigator","workerFileUrl","process","serviceWorker","useServiceWorker","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,iBAAmB,kCAAkC,gBAAkB,iCAAiC,WAAa,4BAA4B,OAAS,0B,oBCA5KD,EAAOC,QAAU,CAAC,cAAgB,kCAAkC,YAAc,gCAAgC,SAAW,+B,oBCA7HD,EAAOC,QAAU,CAAC,eAAiB,gC,wMCanC,SAASC,EAAT,GAA8C,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,SAAmB,EACjBC,mBAAS,IADQ,mBACpCC,EADoC,KAC7BC,EAD6B,OAEXF,mBAAS,IAFE,mBAEpCG,EAFoC,KAE1BC,EAF0B,OAGjBJ,mBAAiC,IAHhB,mBAGpCK,EAHoC,KAG7BC,EAH6B,OAIbN,oBAAkB,GAJL,mBAIpCO,EAJoC,KAI3BC,EAJ2B,KAMrCC,EAAY,uCAAG,sBAAAC,EAAA,6DACnBN,EAAY,IADO,SAEbL,EAASE,EAAOE,GAFH,2CAAH,qDAclB,OATAQ,8BACEb,GACA,iBAAO,CACLQ,WACAE,gBAEF,IAIA,eAACI,EAAA,EAAD,CAAMb,SAAUU,EAAhB,UACGJ,EAAMQ,QACL,qBAAKC,UAAWC,IAAOC,eAAvB,SACE,eAACC,EAAA,EAAD,CAAOC,QAAM,EAACC,MAAM,MAApB,UACE,cAACC,EAAA,EAAD,CAAMC,KAAK,uBACVhB,EAAMQ,aAGT,KACJ,cAACD,EAAA,EAAKU,MAAN,CACEC,UAAQ,EACRC,MAAM,QACNC,KAAK,QACLC,UAAU,QACVC,YAAY,QACZC,KAAK,OACLC,aAAa,OACbC,MAAO7B,EACP8B,SAAU,SAACC,GAAD,OAAO9B,EAAS8B,EAAEC,OAAOH,UAErC,cAAClB,EAAA,EAAKU,MAAN,CACEC,UAAQ,EACRC,MAAM,WACNG,YAAY,WACZF,KAAK,WACLG,KAAK,MACLC,aAAa,OACbC,MAAO3B,EACP4B,SAAU,SAACC,GAAD,OAAO5B,EAAY4B,EAAEC,OAAOH,UAExC,cAACI,EAAA,EAAD,CAAQT,KAAK,SAASU,SAAO,EAAC5B,QAASA,EAAS6B,SAAU7B,EAA1D,wB,+BCvDN,SAAS8B,EAAT,GAA6D,IAAvCC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,MAC1C,OACE,sBAAK1B,UAAWC,IAAO0B,cAAvB,UACE,cAACC,EAAA,EAAD,CAAMvB,MAAM,OAAOwB,QAAM,EAAzB,SACE,sBAAK7B,UAAWC,IAAO6B,SAAvB,UACE,oBAAI9B,UAAWC,IAAO8B,YAAtB,SAAoCP,IACnCC,OAIL,gCAAQC,O,ICpBFM,E,0BCACC,EACF,QCEPC,EAAc,GAELC,EAAiB,SAACC,GAC7BF,EAAcE,GAOHC,EAAiB,kBAC5BC,IAAMC,OAAO,CACXC,QAASP,EACTQ,QAAS,IACTC,QAASR,EACL,CACES,cAAc,UAAD,OAAYT,IAE3B,O,SFrBIF,K,0BAAAA,E,8BAAAA,M,KAKL,IAAMY,EAAW,SAACC,EAAkBT,GACzCU,aAAaC,QAAQF,EAAWT,IAGrBY,EAAc,SAACH,GAC1BC,aAAaG,WAAWJ,IAGbK,EAAW,SAACL,GACvB,OAAOC,aAAaK,QAAQN,I,QGPvB,SAASO,EAAgBC,GAC9B,MAAM,8CAAN,OACEA,IARoBC,KAAKC,SAAW,GACnCC,SAAS,IACTC,UAAUC,GAAkB,GAK/B,QARK,IAAyBA,EAazB,SAASC,EAASC,GACvB,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,ICP5B,SAASI,EAAaC,EAAYC,GACvC,OAAmB,OAAfD,EAAKE,MAAuBF,EAAKE,MAEtBF,EAAKG,MAAM,GAAGC,KACdH,EAAsBD,EAAKG,MAAM,GAAGE,SAE5CL,EAAKG,MAAM,GAAGE,SAGhB,SAASC,EAAmBN,GACjC,IAAMO,EAAcC,EAAqBR,GACzC,YAAoBS,IAAhBF,EAAkC,gCAC/BA,EAAYG,QAGd,SAASF,EAAqBR,GACnC,GAA6B,IAAzBA,EAAKW,SAASlB,OAElB,OADoBO,EAAKW,SAASX,EAAKW,SAASlB,OAAS,GAIpD,SAASmB,EACdC,EACAC,EACAC,GAEA,OAAOF,EAAMG,KAAI,SAAChB,GAAD,OACfA,EAAKI,KAAOU,EAAZ,2BAESd,GACAe,EAAWrB,EAASM,KAEzBA,KAID,SAASiB,EAAejB,GAC7B,GAA6B,IAAzBA,EAAKW,SAASlB,OAAc,OAAO,EACvC,IAAMyB,EAAuBlB,EAAKW,SAASQ,WACzC,SAACC,GAAD,OAAaA,EAAQhB,KAAOJ,EAAKqB,qBAEnC,OAAOrB,EAAKW,SAASlB,OAASyB,EAAuB,EAGhD,SAASI,EAAuBT,GAMrC,OAL0BnB,EAASmB,GACIG,KAAI,SAAChB,GAAD,mBAAC,eACvCA,GADsC,IAEzCuB,YAAaN,EAAejB,QAEFwB,MAC1B,SAACC,EAAOC,GAAR,OAAkBA,EAAMH,YAAcE,EAAMF,eCnBzC,SAAeI,EAAtB,kC,4CAAO,WAA0BxB,GAA1B,SAAAxE,EAAA,sEAEGyC,IAAiBwD,KAAK,iBAAkB,CAC5CzB,UAHC,uCAKH0B,MALG,4C,+BAQQC,I,2EAAf,sBAAAnG,EAAA,sEACgByC,IAAiB2D,IAAI,eADrC,uCACqDF,MADrD,4C,+BAIeG,E,gFAAf,WAA8BtB,EAAiBV,GAA/C,SAAArE,EAAA,sEAEUyC,IAAiBwD,KAAK,oBAAqB,CAC/ClB,UACAV,SAJN,uCAMI6B,MANJ,4C,+BASeI,E,8EAAf,WACEC,GADF,SAAAvG,EAAA,sEAGgByC,IAAiBwD,KAAK,yBAA0B,CAAEM,cAHlE,uCAIKL,MAJL,4C,+BAOeM,G,mFAAf,WAA0BC,EAAiBf,GAA3C,SAAA1F,EAAA,sEAEUyC,IAAiBwD,KAAK,qBAAsB,CAChDQ,UACAf,sBAJN,uCAMIQ,MANJ,4C,sBASA,IAuIIQ,GAvIAC,IAAe,EACbC,GAAaC,YAAa,CAC9BC,QAAS,GACTC,IAAK,UAGDC,GAAoBH,YAAyB,CACjDC,aAAShC,EACTiC,IAAK,iBAGDE,GAAgBJ,YAAiB,CACrCC,QAAS,GACTC,IAAK,aAGA,SAASG,KAAW,IAAD,EACEC,YAAeP,IADjB,mBACjB1B,EADiB,KACVkC,EADU,KAElBC,EAAcC,YAAkBL,IAFd,EAGgBE,YAAeH,IAH/B,mBAGjBO,EAHiB,KAGHC,EAHG,KAKxBC,qBAAU,WACR,sBAAC,4BAAAzH,EAAA,0DACK2G,GADL,wDAMCA,IAAe,EANhB,SAO4BR,IAP5B,OAOOuB,EAPP,OAQCN,EAASM,GARV,0CAAD,KAWC,IAEHD,qBAAU,WACR,IAAME,EAA2BzC,EAAMG,KAAI,SAAChB,GAC1C,IAAMO,EAAcC,EAAqBR,GACzC,MAAO,CACLoC,QAASpC,EAAKI,GACdmD,kBAA8B9C,IAAhBF,EAA4BA,EAAYH,IAAM,MAGhE4C,EAAYM,KAEX,CAACzC,IAEJ,IAAM2C,EAAaC,sBAAW,uCAC5B,WAAO3C,GAAP,iBAAAnF,EAAA,yDACEwH,EAAgBrC,GAEV4C,EAAoB9C,EACxBC,EACAC,GACA,SAACd,GACC,IAAMO,EAAcC,EAAqBR,GACzC,OAAO,2BACFA,GADL,IAEEqB,uBAAmCZ,IAAhBF,EAA4BA,EAAYH,IAAM,OAIvE2C,EAASW,QAKajD,KAJhBkD,EAAkBD,EAAUE,MAChC,SAAC5D,GAAD,OAAUA,EAAKI,KAAOU,QAIiB,IAAvC6C,EAAgBtC,kBApBpB,iEAuBQc,GAAWrB,EAAgB6C,EAAgBtC,mBAvBnD,2CAD4B,sDA0B5B,CAACR,EAAOkC,EAAUI,IAGdU,EAAeJ,uBAAY,WAC/BN,OAAgB1C,KACf,CAAC0C,IAEEW,EAAaL,sBAAW,uCAC5B,WAAOrC,GAAP,iBAAAzF,EAAA,8DACuB8E,IAAjByC,EADN,iEAKuBlB,EAAeZ,EAAS8B,GAL/C,gBAKU9C,EALV,EAKUA,GAER2C,GAAS,SAACgB,GAAD,OACPnD,EAAyBmD,EAAUb,GAAc,SAAClD,GAAD,mBAAC,eAC7CA,GAD4C,IAE/CqB,kBAAmBjB,UAVzB,2CAD4B,sDAe5B,CAAC2C,EAAUG,IAGPc,EAAUP,uBACd,SAACzD,GACC+C,GAAS,SAACgB,GAAD,4BAAkBA,GAAlB,CAA4B/D,OACrCmD,EAAgBnD,EAAKI,MAEvB,CAAC2C,EAAUI,IAGPc,EAAwBR,uBAC5B,SAACS,GAAD,OACErD,EAAM+C,MACJ,SAAC5D,GAAD,OACwB,IAAtBA,EAAKG,MAAMV,QACXO,EAAKG,MAAMgE,MAAK,SAACC,GAAD,OAAUA,EAAKhE,KAAO8D,UAE5C,CAACrD,IAGGwD,EAAcZ,uBAAY,WAC9BnB,IAAe,EACfS,EAAS,IACTC,EAAY,IACZG,OAAgB1C,KACf,CAAC0C,EAAiBH,EAAaD,IAElC,MAAO,CACLlC,QACAqC,aAAcrC,EAAM+C,MAAK,SAAC5D,GAAD,OAAUA,EAAKI,KAAO8C,KAC/CM,aACAQ,UACAH,eACAC,aACAO,cACAJ,yB,SC7LWK,G,qFAAf,WACEjE,EACAnF,EACAE,GAHF,SAAAO,EAAA,sEAMUyC,IAAiBwD,KAAK,iBAAkB,CAC5CvB,WACAnF,QACAE,WACAmJ,iBAAkBnJ,IAVxB,uCAYIyG,MAZJ,4C,+BAee2C,G,mFAAf,WACEtJ,EACAE,GAFF,SAAAO,EAAA,sEAKUyC,IAAiBwD,KAAK,cAAe,CACzC1G,QACAE,aAPN,uCASIyG,MATJ,4C,+BAYe4C,K,8EAAf,sBAAA9I,EAAA,sEACgByC,IAAiB2D,IAAI,YADrC,uCACkDF,MADlD,4C,+BAIe6C,G,iFAAf,WACEC,GADF,SAAAhJ,EAAA,sEAIUyC,IAAiBwD,KAAK,gBAAiB,CAC3C+C,YALN,uCAOI9C,MAPJ,4C,+BAUe+C,G,iFAAf,WAA0BvE,GAA1B,SAAA1E,EAAA,sEACgByC,IAAiB2D,IAAjB,gCAA8C1B,IAD9D,uCAC2EwB,MAD3E,4C,sBAMA,IAqEIgD,GCnIQC,GD8DNC,GAA0B,uCAAG,WACjCC,GADiC,SAAArJ,EAAA,6DAIjCuC,EAAe8G,EAAOC,QAGtBtG,EAASZ,EAAMmH,WAAYF,EAAOC,QAClCtG,EAASZ,EAAMoH,aAAcH,EAAOL,SARH,SAUpBF,KAVoB,mFAAH,uD,SC9DpBK,K,qCAAAA,E,8BAAAA,E,gDAAAA,Q,KAyBZ,IAAMM,GAAcC,wBAA+B,IAEtCC,GAAe,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,SAAyC,EACtCtK,mBAAmB,CACjDuK,OAAQV,GAAWW,wBAFiD,mBAC/DC,EAD+D,KACrDC,EADqD,KAKhEC,EAA6B,2BAC9BF,GD0CuB,SAC5BC,GAD4B,MAEX,CACjBE,MAAM,WAAD,4BAAE,WAAO3K,EAAeE,GAAtB,iBAAAO,EAAA,sEACgB6I,GAAUtJ,EAAOE,GADjC,cACC4J,EADD,gBAEkBD,GAA2BC,GAF7C,OAECU,EAFD,OAGLC,EAAY,2BAAKD,GAAN,IAAgBF,OAAQV,GAAWgB,iBAHzC,2CAAF,qDAAC,GAKNC,SAAS,WAAD,4BAAE,WAAO1F,EAAkBnF,EAAeE,GAAxC,iBAAAO,EAAA,sEACa2I,GAAajE,EAAUnF,EAAOE,GAD3C,cACF4J,EADE,gBAEeD,GAA2BC,GAF1C,OAEFU,EAFE,OAGRC,EAAY,2BAAKD,GAAN,IAAgBF,OAAQV,GAAWgB,iBAHtC,2CAAF,uDAAC,GAKTE,aAAa,WAAD,4BAAE,WAAO/H,GAAP,qBAAAtC,EAAA,yDACQ,OAAhBsC,EADQ,uBAEV0H,GAAY,SAACM,GAAD,mBAAC,eAAeA,GAAhB,IAAsBT,OAAQV,GAAWoB,sBAF3C,0CAMVP,GAAY,SAACM,GAAD,mBAAC,eACRA,GADO,IAEVT,OAAQV,GAAWW,2BAErBvH,EAAeD,GAVL,SAWawG,KAXb,OAWJiB,EAXI,OAYVC,EAAY,2BAAKD,GAAN,IAAgBF,OAAQV,GAAWgB,iBAZpC,qDAcVK,QAAQ7K,MAAR,MAdU,UAiBQ,QADVqJ,EAAU1F,EAASlB,EAAMoH,eAhBvB,oEAmBqBT,GAAaC,GAnBlC,eAmBFyB,EAnBE,OAoBRlI,EAAekI,EAAenB,QApBtB,UAqBeR,KArBf,QAqBFiB,EArBE,OAsBRC,EAAY,2BAAKD,GAAN,IAAgBF,OAAQV,GAAWgB,iBAtBtC,mDAwBRK,QAAQ7K,MAAR,MAGAqK,GAAY,SAACM,GAAD,mBAAC,eACRA,GADO,IAEVT,OAAQV,GAAWoB,sBA7Bb,kEAAF,mDAAC,GAkCbG,OAAQ,WACNnI,EAAe,IACfa,EAAYhB,EAAMmH,YAClBnG,EAAYhB,EAAMoH,cAClBQ,EAAY,CAAEH,OAAQV,GAAWoB,qBC5F9BI,CAAeX,IAGpB,OACE,cAACP,GAAYmB,SAAb,CAAsBxJ,MAAO6I,EAA7B,SAA4CL,KAInCiB,GAAU,kBAAMC,qBAAWrB,KCvCxC,SAASsB,KAAkB,IACjBb,EAAUW,KAAVX,MACFc,EAAWC,cACXC,EAAiBC,mBAKjBtC,EAAS,uCAAG,WAAOtJ,EAAeE,GAAtB,qBAAAO,EAAA,sEAEd,UAAAkL,EAAeE,eAAf,SAAwBtL,YAAW,GACnC,UAAAoL,EAAeE,eAAf,SAAwBxL,SAAS,IAHnB,SAIRsK,EAAM3K,EAAOE,GAJL,OAKduL,EAAS,KALK,gDAOd,UAAAE,EAAeE,eAAf,SAAwBxL,SAAS,CAAEO,QAAS,wBAC5CqK,QAAQ7K,MAAR,MARc,yBAUd,UAAAuL,EAAeE,eAAf,SAAwBtL,YAAW,GAVrB,4EAAH,wDAcf,OACE,cAAC6B,EAAD,CACEC,QAAQ,QACRC,YAAa,cAAC1C,EAAD,CAAOC,QAAS8L,EAAgB7L,SAAUwJ,IACvD/G,MACE,+DACyB,cAAC,IAAD,CAAMuJ,GAAG,YAAT,2BCpBjC,SAASC,GAAT,GAAiD,IAA7BlM,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,SAAmB,EACdC,mBAAS,IADK,mBACvCoF,EADuC,KAC7B6G,EAD6B,OAEpBjM,mBAAS,IAFW,mBAEvCC,EAFuC,KAEhCC,EAFgC,OAGdF,mBAAS,IAHK,mBAGvCG,EAHuC,KAG7BC,EAH6B,OAIpBJ,mBAAiC,IAJb,mBAIvCK,EAJuC,KAIhCC,EAJgC,OAKhBN,oBAAkB,GALF,mBAKvCO,EALuC,KAK9BC,EAL8B,KAOxCC,EAAY,uCAAG,sBAAAC,EAAA,6DACnBN,EAAY,IADO,SAEbL,EAASqF,EAAUnF,EAAOE,GAFb,2CAAH,qDAclB,OATAQ,8BACEb,GACA,iBAAO,CACLQ,WACAE,gBAEF,IAIA,eAACI,EAAA,EAAD,CAAMb,SAAUU,EAAhB,UACE,cAACG,EAAA,EAAKU,MAAN,CACEC,UAAQ,EACRC,MAAM,WACNG,YAAY,WACZF,KAAK,OACLG,KAAK,OACLC,aAAa,OACbC,MAAOsD,EACPrD,SAAU,SAACC,GAAD,OAAOiK,EAAYjK,EAAEC,OAAOH,QACtCzB,MAAOA,EAAM+E,WAEf,cAACxE,EAAA,EAAKU,MAAN,CACEC,UAAQ,EACRC,MAAM,QACNC,KAAK,QACLC,UAAU,QACVC,YAAY,QACZC,KAAK,OACLC,aAAa,OACbC,MAAO7B,EACP8B,SAAU,SAACC,GAAD,OAAO9B,EAAS8B,EAAEC,OAAOH,QACnCzB,MAAOA,EAAMJ,QAEf,cAACW,EAAA,EAAKU,MAAN,CACEC,UAAQ,EACRC,MAAM,WACNG,YAAY,WACZF,KAAK,WACLG,KAAK,MACLC,aAAa,OACbC,MAAO3B,EACP4B,SAAU,SAACC,GAAD,OAAO5B,EAAY4B,EAAEC,OAAOH,QACtCzB,MAAOA,EAAMF,WAEf,cAAC+B,EAAA,EAAD,CAAQT,KAAK,SAASU,SAAO,EAAC5B,QAASA,EAAS6B,SAAU7B,EAA1D,wBCjEN,SAAS2L,KAAqB,IACpBpB,EAAaS,KAAbT,SACFY,EAAWC,cACXQ,EAAkBN,mBAKlBxC,EAAY,uCAAG,WACnBjE,EACAnF,EACAE,GAHmB,qBAAAO,EAAA,sEAMjB,UAAAyL,EAAgBL,eAAhB,SAAyBtL,YAAW,GACpC,UAAA2L,EAAgBL,eAAhB,SAAyBxL,SAAS,IAPjB,SAQXwK,EAAS1F,EAAUnF,EAAOE,GARf,OASjBuL,EAAS,KATQ,gDAWjB,UAAAS,EAAgBL,eAAhB,SAAyBxL,SAAS,KAAa8L,SAASxF,MACxDsE,QAAQ7K,MAAR,MAZiB,yBAcjB,UAAA8L,EAAgBL,eAAhB,SAAyBtL,YAAW,GAdnB,4EAAH,0DAkBlB,OACE,cAAC6B,EAAD,CACEC,QAAQ,WACRC,YACE,cAACyJ,GAAD,CAAUlM,QAASqM,EAAiBpM,SAAUsJ,IAEhD7G,MACE,iEAC2B,cAAC,IAAD,CAAMuJ,GAAG,SAAT,wB,wBCtCnC,SAASM,KACP,OACE,cAACC,GAAA,EAAD,CAAQC,QAAM,EAACC,UAAQ,EAAvB,SACE,cAACC,GAAA,EAAD,MCGN,SAASC,GAAT,GAAyD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,SAC3BrC,EAAWgB,KAAXhB,OAER,OAAIA,IAAWV,GAAWgB,eACP,IAAb+B,EAA0BD,EAClB,cAAC,IAAD,CAAUE,SAAO,EAACd,GAAG,MACxBxB,IAAWV,GAAWoB,mBACd,IAAb2B,EAA0BD,EAKzB,cAAC,IAAD,CAAUE,SAAO,EAACd,GAAG,W,oFCNxBe,GAAgB,kBACpB,qBAAKhM,UAAWC,KAAOgM,uBAAvB,SACE,eAACC,GAAA,EAAD,CAAQC,GAAG,KAAKrL,MAAI,EAApB,UACE,cAACR,EAAA,EAAD,CAAMC,KAAK,SADb,0BAGE,cAAC2L,GAAA,EAAOE,UAAR,+DAOAC,GAAWC,gBACf,YAA4C,IAAzC1H,EAAwC,EAAxCA,SACOP,EAAOoG,KAAPpG,GACR,OACE,mCACGO,EAASK,KAAI,SAACI,GAAD,OACZ,mBAEErF,UAAS,UAAKC,KAAOsM,YAAZ,YACPlH,EAAQmH,SAAWnI,EAAKpE,KAAOwM,WAAa,IAHhD,SAME,+BACGpH,EAAQV,WANNU,EAAQhB,YAcvB,kBAAaqI,EAAb,EAAG9H,SAAsC+H,EAAzC,EAA+B/H,SAA/B,OACE8H,EAAahJ,SAAWiJ,EAAYjJ,QACpCgJ,EAAaA,EAAahJ,OAAS,KACjCiJ,EAAYA,EAAYjJ,OAAS,MAGvC,SAASkJ,KACP,IAAMC,EAAY9B,iBAAuB,MADvB,EAEiCjE,KAA3CK,EAFU,EAEVA,aAAcW,EAFJ,EAEIA,aAAcC,EAFlB,EAEkBA,WAFlB,EAGkB7I,mBAAS,IAH3B,mBAGX4N,EAHW,KAGCC,EAHD,KAWlB,OANA1F,qBAAU,WACkB,OAAtBwF,EAAU7B,SACZ6B,EAAU7B,QAAQgC,mBAEnB,CAAC7F,EAAD,OAAeA,QAAf,IAAeA,OAAf,EAAeA,EAAcvC,gBAEXF,IAAjByC,EAAmC,cAAC,GAAD,IAErC,cAAC8F,GAAA,EAAD,CAAYC,SAAU,GAAIC,OAAQ,GAAlC,SACE,eAACC,GAAA,EAAD,CAASpN,UAAWC,KAAOoN,kBAA3B,UACE,cAAC/M,EAAA,EAAD,CACEN,UAAWC,KAAOqN,WAClB/M,KAAK,aACLgN,KAAK,MACLC,QAAS1F,IAEX,sBAAK9H,UAAWC,KAAOwN,kBAAvB,UACE,cAACpB,GAAD,CAAUzH,SAAUuC,EAAavC,WACjC,qBAAK8I,IAAKb,OAEZ,cAACrM,GAAA,EAAD,CACEmN,WAAS,EACT3M,MAAO8L,EACPc,WAAY,SAAC1M,GACQ,KAAfA,EAAE2M,WACJ9F,EAAW7G,EAAEC,OAAOH,OACpB+L,EAAc,MAGlB9L,SAAU,SAACC,GAAD,OAAO6L,EAAc7L,EAAEC,OAAOH,QACxCN,MACE,cAACU,EAAA,EAAD,CACEC,SAAO,EACPP,MAAI,EACJ2K,QAAM,EACN+B,QAAS,WACPzF,EAAW+E,GACXC,EAAc,KANlB,SASE,cAACzM,EAAA,EAAD,CAAMC,KAAK,WAGfuN,cAAc,QACdjN,YAAY,6B,ICpGlBT,G,gECUE2N,GAAiB,SAAC,GAAD,IAAGzJ,EAAH,EAAGA,SAAH,OACrB,qBAAKtE,UAAWC,KAAO+N,mBAAvB,SACE,eAAC9B,GAAA,EAAD,CAAQC,GAAG,KAAKrL,MAAI,EAApB,UACE,cAACR,EAAA,EAAD,CAAMC,KAAK,eADb,OAEO+D,EACL,cAAC4H,GAAA,EAAOE,UAAR,qDAKA6B,GAAmB,SAAC,GAAD,IACvBC,EADuB,EACvBA,MADuB,SAEvBC,OAKS,KACP,qBAAKnO,UAAWC,KAAOmO,qBAAvB,SACE,cAACjO,EAAA,EAAD,CAAOE,MAAM,MAAMgO,UAAQ,EAACC,UAAQ,EAApC,SACGJ,OAKT,SAASK,KAAa,IAAD,EACM9D,KAAjBpG,EADW,EACXA,GAAIC,EADO,EACPA,SADO,EAEyBwC,KAApChC,EAFW,EAEXA,MAAOqC,EAFI,EAEJA,aAAcM,EAFV,EAEUA,WAE7B,OAAqB,IAAjB3C,EAAMpB,aAA6BgB,IAAbJ,EACjB,cAAC,GAAD,CAAgBA,SAAUA,IAGjC,cAACkK,GAAA,EAAD,CAAMC,UAAQ,EAACC,QAAM,EAACnB,KAAK,MAAMvN,UAAWC,KAAO0O,UAAnD,SACGpJ,EAAuBT,GAAOG,KAAI,SAAChB,GAAD,OACjC,cAACuK,GAAA,EAAKI,KAAN,CAEEpB,QAAS,kBAAM/F,EAAWxD,EAAKI,KAC/BwK,MAAO,CAAEC,QAAS,GAHpB,SAKE,qBAAK9O,UAAWiE,EAAKI,MAAL,OAAY8C,QAAZ,IAAYA,OAAZ,EAAYA,EAAc9C,IAAKpE,KAAOwL,OAAS,GAA/D,SACE,sBAAKzL,UAAWC,KAAO8O,SAAvB,UACE,qBAAK/O,UAAWC,KAAO+O,WAAvB,SACE,cAACC,GAAA,EAAD,CAAOC,QAAM,EAACC,IAAK/L,EAAgB,GAAD,OAAIa,EAAKI,GAAT,YAAeA,QAEnD,eAACmK,GAAA,EAAKY,QAAN,WACE,cAACZ,GAAA,EAAKtC,OAAN,UAAclI,EAAaC,EAAMI,KACjC,cAACmK,GAAA,EAAKa,YAAN,UAEE,mBAAGrP,UAAWC,KAAOqP,YAArB,SACG/K,EAAmBN,OAIxB,cAAC,GAAD,CACEiK,MAAOjK,EAAKuB,YACZ2I,OACuB,IAArBlK,EAAKuB,cAAiC,OAAZ2B,QAAY,IAAZA,OAAA,EAAAA,EAAc9C,MAAOJ,EAAKI,cArBzDJ,EAAKI,S,yBChCdkL,GAAe,WAAO,IAAD,EFZpB,WAA0B,IAAD,EACgBrQ,oBAAkB,GADlC,mBACvBsQ,EADuB,KACNC,EADM,KAiC9B,OA9BApI,qBAAU,WACR,IAAMqI,EAAkB,SAACC,GACvBA,EAAMC,iBACNxP,GAASuP,EACTF,GAAmB,IAIrB,OADAI,OAAOC,iBAAiB,sBAAuBJ,GACxC,kBACLG,OAAOE,oBAAoB,sBAAuBL,MACnD,IAEHrI,qBAAU,WACR,IAAM2I,EAAoB,SAACL,GACzBF,GAAmB,GACnBrP,QAASsE,GAIX,OADAmL,OAAOC,iBAAiB,eAAgBE,GACjC,kBAAMH,OAAOE,oBAAoB,eAAgBC,MACvD,IAUI,CACLR,kBACAS,WAVc,uCAAG,sBAAArQ,EAAA,8DACF8E,IAAXtE,GADa,wDAGhBA,GAAeA,SAHC,SAI+BA,GAAe8P,WAJ9C,OAKD,aALC,OAITC,SACoBV,GAAmB,GAL9B,2CAAH,sDEZwBW,GAAhCZ,EADiB,EACjBA,gBAAiBS,EADA,EACAA,WACzB,OAAKT,EAGH,eAACa,GAAA,EAASzB,KAAV,CAAepB,QAASyC,EAAxB,UACE,cAAC3P,EAAA,EAAD,CAAMC,KAAK,aADb,aAH2B,MAczB+P,GAAkB,SAAC,GAAD,IAAGhG,EAAH,EAAGA,OAAH,OACtB,cAAC+F,GAAA,EAAD,CAAUE,QAAM,EAACC,UAAU,OAAO1P,KAAK,oBAAvC,SACE,eAACuP,GAAA,EAASI,KAAV,WACE,eAACJ,GAAA,EAASzB,KAAV,CAAepB,QAASlD,EAAxB,UACE,cAAChK,EAAA,EAAD,CAAMC,KAAK,cADb,YAIA,cAAC,GAAD,UAKN,SAASmQ,KAAW,IAAD,EACYjG,KAArBnG,EADS,EACTA,SAAUgG,EADD,EACCA,OADD,EVkGZ,WAA0B,IACvBjG,EAAOoG,KAAPpG,GADsB,EAEyByC,KAA/CW,EAFsB,EAEtBA,WAAYQ,EAFU,EAEVA,QAASC,EAFC,EAEDA,sBAFC,EAGMhJ,mBAAiB,IAHvB,mBAGvByR,EAHuB,KAGXC,EAHW,OAIY1R,oBAAkB,GAJ9B,mBAIvB2R,EAJuB,KAIRC,EAJQ,OAKU5R,mBAAyB,IALnC,mBAKvB6R,EALuB,KAKTC,EALS,KAOxBC,EAAQ,uCAAG,WAAOC,GAAP,eAAAtR,EAAA,kEAEW8E,IAAtBoE,IAAiCA,GAAkBqI,SAEvDrI,GAAoBxG,IAAM8O,YAAYC,SAJvB,SAKKxI,GAAWqI,GALhB,cAKT9M,EALS,yBAMRA,EACJkN,QAAO,SAACjJ,GAAD,OAAUA,EAAKhE,KAAOA,KAC7BY,KAAI,SAACoD,GAAD,MAAW,CACdhE,GAAIgE,EAAKhE,GACTF,MAAOkE,EAAK/D,SACZgL,YAAajH,EAAKlJ,WAXP,2CAAH,sDA4Cd,MAAO,CACLoS,eA9BkB,uCAAG,WACrBrQ,EACA4E,GAFqB,eAAAlG,EAAA,0DAIjBkG,EAAK9E,MAJY,wBAKnB4P,EAAc9K,EAAK9E,OACnB8P,GAAiB,GANE,SAOCG,EAASnL,EAAK9E,OAPf,OAOboD,EAPa,OAQnB4M,EAAgB5M,GAChB0M,GAAiB,GATE,wBAUdF,EAAc,IAVA,4CAAH,wDA+BlBY,eAlBkB,uCAAG,WACrB7B,EACA7J,GAFqB,mBAAAlG,EAAA,yDAIfyI,EAAOvC,EAAK2L,OAAOpN,QAEZK,KADPT,EAAOiE,EAAsBG,IALd,gCAOGzC,EAAW,CAACyC,IAPf,OAObqJ,EAPa,OAQnBzJ,EAAQyJ,GARW,uBAUnBjK,EAAWxD,EAAKI,IAVG,QAYrB2M,EAAgB,IAChBJ,EAAc,IAbO,4CAAH,wDAmBlBC,gBACAE,eACAJ,cUlJEgB,GALFH,EAHe,EAGfA,eACAD,EAJe,EAIfA,eACAV,EALe,EAKfA,cACAE,EANe,EAMfA,aACAJ,EAPe,EAOfA,WAEMxJ,EAAiBL,KAAjBK,aAER,OACE,cAAC8F,GAAA,EAAD,CAAYC,SAAU,EAAGC,OAAQ,GAAjC,SACE,sBACEnN,UAAS,UAAKC,KAAO2R,iBAAZ,YACPzK,EAAelH,KAAOkO,OAAS,IAFnC,UAKE,sBAAKnO,UAAWC,KAAO4R,gBAAvB,UACE,eAAC3F,GAAA,EAAD,CAAQC,GAAG,KAAX,UACE,cAAC8C,GAAA,EAAD,CAAOX,UAAQ,EAACa,IAAI,YAAYnP,UAAWC,KAAO6R,aAClD,eAAC5F,GAAA,EAAOkD,QAAR,oBAEE,cAAClD,GAAA,EAAOE,UAAR,UAAmB9H,UAGvB,cAAC,GAAD,CAAiBgG,OAAQA,OAE3B,cAACyH,GAAA,EAAD,CACElR,YAAY,oBACZpB,QAASoR,EACTW,eAAgBA,EAChBD,eAAgBA,EAChBS,QAASjB,EACT/P,MAAO2P,IAET,cAACpC,GAAD,SC5ER,SAAS0D,KACP,OACE,cAACC,GAAA,EAAD,CAAMC,QAAQ,MAAMC,SAAO,EAA3B,SACE,eAACC,GAAA,EAAD,WACE,cAAC3B,GAAD,IACA,cAAC9D,GAAD,SCJR,SAAS0F,MbgNF,WAA0B,IACvB7I,EAAWgB,KAAXhB,OACFzC,EAAWE,YAAkBV,IAC7B+L,EAAWC,YAAe3L,IAEhCQ,qBAAU,WACR,GAAIoC,IAAWV,GAAWgB,eAAiBwI,EAAS7O,OAAS,EAwB3D,OAvBA4C,GAASmM,YAAW,sBAAC,4BAAA7S,EAAA,sEAEOsG,EAAeqM,GAFtB,UAEb5F,EAFa,OAId+F,OAAOC,OAAOhG,GAAavE,MAAK,SAACnE,GAAD,OAAUA,EAAKP,OAAS,KAJ1C,iDAMnBsD,GAAS,SAAClC,GACR,IAAMkD,EAAmBrE,EAASmB,GAalC,OAZA4N,OAAOE,KAAKjG,GAAakG,SAAQ,SAAClM,GAAS,IAAD,EAClCmM,EAASC,SAASpM,GAExB,GAAmC,IAA/BgG,EAAYmG,GAAQpP,OAAxB,CAGA,IAAMsP,EAAYhL,EAAS5C,WAAU,SAACnB,GAAD,OAAUA,EAAKI,KAAOyO,MAE3D,EAAA9K,EAASgL,GAAWpO,UAASqO,KAA7B,oBAAqCtG,EAAYmG,SAI5C9K,KApBU,2CAhNH,KAuOX,kBAAMkL,cAAc5M,OAG5B,CAACmD,EAAQ8I,IahPZY,GCHK,WAA6B,IAC1B1J,EAAWgB,KAAXhB,OAERpC,qBAAU,WACR,GAAIoC,IAAWV,GAAWgB,eACpB,kBAAmBqJ,UAAzB,CAEA,IAAMC,EAAa,UAAMC,GAAN,sBACnBF,UAAUG,cAAcvJ,SAASqJ,MAChC,CAAC5J,IDLJ+J,GAFuB,IAGflL,EAAgBxB,KAAhBwB,YAMR,OAFAjB,qBAAU,kBAAMiB,IAAa,IAEtB,cAAC2J,GAAD,IE4BMwB,OA/Bf,WAAgB,IAAD,EACoBhJ,KAAzBR,EADK,EACLA,aAAcR,EADT,EACSA,OAQtB,OANApC,qBAAU,WACR,IAAMjF,EAAQc,EAASlB,EAAMmH,YAC7Bc,EAAa7H,KAEZ,IAECqH,IAAWV,GAAWW,sBAA8B,cAAC6B,GAAD,IAGtD,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEmI,KAAK,SACL7H,QAAS,cAACD,GAAD,CAAkBC,QAAS,cAAClB,GAAD,QAEtC,cAAC,IAAD,CACE+I,KAAK,YACL7H,QAAS,cAACD,GAAD,CAAkBC,QAAS,cAACT,GAAD,QAEtC,cAAC,IAAD,CACEsI,KAAK,IACL7H,QAAS,cAACD,GAAD,CAAkBC,QAAS,cAACyG,GAAD,IAAmBxG,UAAQ,YC7BzE6H,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,GAAD,UACE,cAAC,GAAD,UAINC,SAASC,eAAe,U,mBCb1BlV,EAAOC,QAAU,CAAC,mBAAqB,sCAAsC,UAAY,6BAA6B,SAAW,4BAA4B,OAAS,0BAA0B,WAAa,8BAA8B,YAAc,+BAA+B,qBAAuB,0C,mBCA/SD,EAAOC,QAAU,CAAC,uBAAyB,yCAAyC,kBAAoB,oCAAoC,WAAa,6BAA6B,kBAAoB,oCAAoC,YAAc,8BAA8B,WAAa,gC","file":"static/js/main.5a970c9d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"sideBarContainer\":\"SideBar_sideBarContainer__R9HZo\",\"headerContainer\":\"SideBar_headerContainer__3ydQ7\",\"headerLogo\":\"SideBar_headerLogo__2HuW0\",\"hidden\":\"SideBar_hidden__1aeSv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"authContainer\":\"AuthLayout_authContainer__lyNfd\",\"authHeading\":\"AuthLayout_authHeading__1_lfe\",\"authCard\":\"AuthLayout_authCard__c-7Cw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alertContainer\":\"Login_alertContainer__2EguZ\"};","import { MutableRefObject, useImperativeHandle, useState } from \"react\";\nimport { Button, Form, Icon, Label } from \"semantic-ui-react\";\nimport styles from \"./Login.module.scss\";\ninterface Props {\n  ctrlRef: MutableRefObject<\n    | {\n        setError: (errors: Record<string, string>) => void;\n        setLoading: (loading: boolean) => void;\n      }\n    | undefined\n  >;\n  onSubmit: (email: string, password: string) => void;\n}\n\nfunction Login({ ctrlRef, onSubmit }: Props) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState<Record<string, string>>({});\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const onFormSubmit = async () => {\n    setPassword(\"\");\n    await onSubmit(email, password);\n  };\n\n  useImperativeHandle(\n    ctrlRef,\n    () => ({\n      setError,\n      setLoading,\n    }),\n    []\n  );\n\n  return (\n    <Form onSubmit={onFormSubmit}>\n      {error.general ? (\n        <div className={styles.alertContainer}>\n          <Label prompt color=\"red\">\n            <Icon name=\"exclamation circle\" />\n            {error.general}\n          </Label>\n        </div>\n      ) : null}\n      <Form.Input\n        required\n        label=\"Email\"\n        type=\"email\"\n        inputmode=\"email\"\n        placeholder=\"email\"\n        icon=\"mail\"\n        iconPosition=\"left\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n      />\n      <Form.Input\n        required\n        label=\"Password\"\n        placeholder=\"password\"\n        type=\"password\"\n        icon=\"key\"\n        iconPosition=\"left\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      <Button type=\"submit\" primary loading={loading} disabled={loading}>\n        Sign In\n      </Button>\n    </Form>\n  );\n}\n\nexport { Login };\n","import { ReactNode } from \"react\";\nimport { Card } from \"semantic-ui-react\";\nimport styles from \"./AuthLayout.module.scss\";\n\ninterface Props {\n  heading: string;\n  cardContent: ReactNode;\n  extra?: ReactNode;\n}\n\nfunction AuthLayout({ heading, cardContent, extra }: Props) {\n  return (\n    <div className={styles.authContainer}>\n      <Card color=\"blue\" raised>\n        <div className={styles.authCard}>\n          <h2 className={styles.authHeading}>{heading}</h2>\n          {cardContent}\n        </div>\n      </Card>\n\n      <small>{extra}</small>\n    </div>\n  );\n}\n\nexport { AuthLayout };\n","export enum Token {\n  AcessToken = \"ACCESS_TOKEN\",\n  RefreshToken = \"REFRESH_TOKEN\",\n}\n\nexport const setToken = (tokenType: Token, token: string) => {\n  localStorage.setItem(tokenType, token);\n};\n\nexport const removeToken = (tokenType: Token) => {\n  localStorage.removeItem(tokenType);\n};\n\nexport const getToken = (tokenType: Token): string | null => {\n  return localStorage.getItem(tokenType);\n};\n","export const constants = {\n  baseURL: \"/api/\",\n};\n","import axios from \"axios\";\nimport { constants } from \"./constants\";\n\nlet accessToken = \"\";\n\nexport const setAccessToken = (token: string) => {\n  accessToken = token;\n};\n\nexport const removeAccessToken = (token: string) => {\n  accessToken = \"\";\n};\n\nexport const getApiInstance = () =>\n  axios.create({\n    baseURL: constants.baseURL,\n    timeout: 5000,\n    headers: accessToken\n      ? {\n          Authorization: `Bearer ${accessToken}`,\n        }\n      : {},\n  });\n","export function getRandomString(length?: number) {\n  const randomString = (Math.random() + 1)\n    .toString(36)\n    .substring(length ? length : 7);\n  return randomString;\n}\n\nexport function getRandomAvatar(seed?: string) {\n  return `https://avatars.dicebear.com/api/avataaars/${\n    seed ? seed : getRandomString()\n  }.svg`;\n}\n\nexport function deepCopy(object: Object): any {\n  return JSON.parse(JSON.stringify(object));\n}\n","import { deepCopy } from \"../../common/utils\";\nimport { Message, Room } from \"./chat-service\";\n\ninterface RoomWithUnreadCount extends Room {\n  unreadCount: number;\n}\n\nexport function getRoomTitle(room: Room, currentUserId?: number) {\n  if (room.title !== null) return room.title;\n\n  const userId = room.users[0].id;\n  if (userId === currentUserId) return room.users[1].username;\n\n  return room.users[0].username;\n}\n\nexport function getRoomDescription(room: Room) {\n  const lastMessage = getLastMessageInRoom(room);\n  if (lastMessage === undefined) return \"Tap to start the conversation\";\n  return lastMessage.content;\n}\n\nexport function getLastMessageInRoom(room: Room): Message | undefined {\n  if (room.messages.length === 0) return;\n  const lastMessage = room.messages[room.messages.length - 1];\n  return lastMessage;\n}\n\nexport function getSelectedRoomAndUpdate(\n  rooms: Room[],\n  selectedRoomId: number,\n  roomUpdate: (room: Room) => Room\n) {\n  return rooms.map((room) =>\n    room.id === selectedRoomId\n      ? {\n          ...room,\n          ...roomUpdate(deepCopy(room)),\n        }\n      : room\n  );\n}\n\nexport function getUnreadCount(room: Room): number {\n  if (room.messages.length === 0) return 0;\n  const lastReadMessageIndex = room.messages.findIndex(\n    (message) => message.id === room.last_read_message\n  );\n  return room.messages.length - lastReadMessageIndex - 1;\n}\n\nexport function sortRoomsByUnreadCount(rooms: Room[]): RoomWithUnreadCount[] {\n  const roomsCopy: Room[] = deepCopy(rooms);\n  const roomsWithUnreadCount = roomsCopy.map((room) => ({\n    ...room,\n    unreadCount: getUnreadCount(room),\n  }));\n  return roomsWithUnreadCount.sort(\n    (room1, room2) => room2.unreadCount - room1.unreadCount\n  );\n}\n","import { useCallback, useEffect } from \"react\";\nimport {\n  atom,\n  useRecoilState,\n  useRecoilValue,\n  useSetRecoilState,\n} from \"recoil\";\nimport { getApiInstance } from \"../../common/APIInstance\";\nimport { deepCopy } from \"../../common/utils\";\nimport { AuthStatus, useAuth } from \"../auth/AuthContext\";\nimport { getLastMessageInRoom, getSelectedRoomAndUpdate } from \"./chat-utils\";\n\nconst POLLER_INTERVAL = 1000;\n\nexport interface User {\n  id: number;\n  username: string;\n  email: string;\n}\n\nexport interface Message {\n  id: number;\n  author: number;\n  content: string;\n}\n\nexport interface Room {\n  id: number;\n  title: string | null;\n  users: User[];\n  messages: Message[];\n  last_read_message: number;\n}\n\ninterface RoomList {\n  room_id: number;\n  last_message: number;\n}\n\nexport async function addNewRoom(users: number[]): Promise<Room> {\n  return (\n    await getApiInstance().post(\"chat/add_room/\", {\n      users,\n    })\n  ).data;\n}\n\nasync function getRooms(): Promise<Room[]> {\n  return (await getApiInstance().get(\"chat/rooms/\")).data;\n}\n\nasync function sendNewMessage(content: string, room: number) {\n  return (\n    await getApiInstance().post(\"chat/new_message/\", {\n      content,\n      room,\n    })\n  ).data;\n}\n\nasync function getNewMessages(\n  room_list: RoomList[]\n): Promise<Record<number, Message[]>> {\n  return (await getApiInstance().post(\"chat/get_new_messages/\", { room_list }))\n    .data;\n}\n\nasync function markAsRead(room_id: number, last_read_message: number) {\n  return (\n    await getApiInstance().post(\"chat/mark_as_read/\", {\n      room_id,\n      last_read_message,\n    })\n  ).data;\n}\n\nlet roomsFetched = false;\nconst roomsState = atom<Room[]>({\n  default: [],\n  key: \"rooms\",\n});\n\nconst selectedRoomState = atom<number | undefined>({\n  default: undefined,\n  key: \"selectedRoom\",\n});\n\nconst roomListState = atom<RoomList[]>({\n  default: [],\n  key: \"roomList\",\n});\n\nexport function useChat() {\n  const [rooms, setRooms] = useRecoilState(roomsState);\n  const setRoomList = useSetRecoilState(roomListState);\n  const [selectedRoom, setSelectedRoom] = useRecoilState(selectedRoomState);\n\n  useEffect(() => {\n    (async () => {\n      if (roomsFetched) return;\n\n      // first setting is to true\n      // reason: if useChat is called all at once,\n      // the delay from the server makes it not possible to call only once\n      roomsFetched = true;\n      const initialRooms = await getRooms();\n      setRooms(initialRooms);\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const newRoomsList: RoomList[] = rooms.map((room) => {\n      const lastMessage = getLastMessageInRoom(room);\n      return {\n        room_id: room.id,\n        last_message: lastMessage !== undefined ? lastMessage.id : -1,\n      };\n    });\n    setRoomList(newRoomsList);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [rooms]);\n\n  const selectRoom = useCallback(\n    async (selectedRoomId: number) => {\n      setSelectedRoom(selectedRoomId);\n\n      const roomsCopy: Room[] = getSelectedRoomAndUpdate(\n        rooms,\n        selectedRoomId,\n        (room) => {\n          const lastMessage = getLastMessageInRoom(room);\n          return {\n            ...room,\n            last_read_message: lastMessage !== undefined ? lastMessage.id : -1,\n          };\n        }\n      );\n      setRooms(roomsCopy);\n      const selectedRoomObj = roomsCopy.find(\n        (room) => room.id === selectedRoomId\n      );\n      if (\n        selectedRoomObj === undefined ||\n        selectedRoomObj.last_read_message === -1\n      )\n        return;\n      await markAsRead(selectedRoomId, selectedRoomObj.last_read_message);\n    },\n    [rooms, setRooms, setSelectedRoom]\n  );\n\n  const deSelectRoom = useCallback(() => {\n    setSelectedRoom(undefined);\n  }, [setSelectedRoom]);\n\n  const addMessage = useCallback(\n    async (message: string) => {\n      if (selectedRoom === undefined) return;\n\n      // let's not update locally\n      // let's get the message from poller\n      const { id } = await sendNewMessage(message, selectedRoom);\n      // but need to change the last read message in rooms array\n      setRooms((oldRooms) =>\n        getSelectedRoomAndUpdate(oldRooms, selectedRoom, (room) => ({\n          ...room,\n          last_read_message: id,\n        }))\n      );\n    },\n    [setRooms, selectedRoom]\n  );\n\n  const addRoom = useCallback(\n    (room: Room) => {\n      setRooms((oldRooms) => [...oldRooms, room]);\n      setSelectedRoom(room.id);\n    },\n    [setRooms, setSelectedRoom]\n  );\n\n  const getRoomIfAlreadyThere = useCallback(\n    (userId: number) =>\n      rooms.find(\n        (room) =>\n          room.users.length === 2 &&\n          room.users.some((user) => user.id === userId)\n      ),\n    [rooms]\n  );\n\n  const resetStates = useCallback(() => {\n    roomsFetched = false;\n    setRooms([]);\n    setRoomList([]);\n    setSelectedRoom(undefined);\n  }, [setSelectedRoom, setRoomList, setRooms]);\n\n  return {\n    rooms,\n    selectedRoom: rooms.find((room) => room.id === selectedRoom),\n    selectRoom,\n    addRoom,\n    deSelectRoom,\n    addMessage,\n    resetStates,\n    getRoomIfAlreadyThere,\n  };\n}\n\nlet poller: any;\n\nexport function useChatPoller() {\n  const { status } = useAuth();\n  const setRooms = useSetRecoilState(roomsState);\n  const roomList = useRecoilValue(roomListState);\n\n  useEffect(() => {\n    if (status === AuthStatus.Authenticated && roomList.length > 0) {\n      poller = setInterval(async () => {\n        // get new messages for all the rooms\n        const newMessages = await getNewMessages(roomList);\n        // if no new messages are there do nothing\n        if (!Object.values(newMessages).some((room) => room.length > 0)) return;\n\n        setRooms((rooms) => {\n          const oldRooms: Room[] = deepCopy(rooms);\n          Object.keys(newMessages).forEach((key) => {\n            const roomId = parseInt(key);\n            // no new messages for the room\n            if (newMessages[roomId].length === 0) return;\n\n            // get the index of room in rooms array\n            const roomIndex = oldRooms.findIndex((room) => room.id === roomId);\n            // push the new messages to the messages array of rooms\n            oldRooms[roomIndex].messages.push(...newMessages[roomId]);\n            // these message are not yet read\n            // so don't need to change the last_read_message in rooms\n          });\n          return oldRooms;\n        });\n      }, POLLER_INTERVAL);\n      return () => clearInterval(poller);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [status, roomList]);\n}\n","import axios, { CancelTokenSource } from \"axios\";\nimport { Dispatch, MouseEvent, SetStateAction, useState } from \"react\";\nimport { SearchProps, SearchResultData } from \"semantic-ui-react\";\nimport { getApiInstance, setAccessToken } from \"../../common/APIInstance\";\nimport {\n  getToken,\n  removeToken,\n  setToken,\n  Token,\n} from \"../../common/tokenLocalStorage\";\nimport { addNewRoom, useChat, User } from \"../chat/chat-service\";\nimport { AuthActions, AuthInfo, AuthStatus, useAuth } from \"./AuthContext\";\n\ninterface TokenReponse {\n  access: string;\n  refresh: string;\n}\n\nasync function registerUser(\n  username: string,\n  email: string,\n  password: string\n): Promise<TokenReponse> {\n  return (\n    await getApiInstance().post(\"auth/register/\", {\n      username,\n      email,\n      password,\n      confirm_password: password,\n    })\n  ).data;\n}\n\nasync function loginUser(\n  email: string,\n  password: string\n): Promise<TokenReponse> {\n  return (\n    await getApiInstance().post(\"auth/token/\", {\n      email,\n      password,\n    })\n  ).data;\n}\n\nasync function getUserDetails(): Promise<AuthInfo> {\n  return (await getApiInstance().get(\"auth/me/\")).data;\n}\n\nasync function refreshToken(\n  refresh: string\n): Promise<Omit<TokenReponse, \"refresh\">> {\n  return (\n    await getApiInstance().post(\"auth/refresh/\", {\n      refresh,\n    })\n  ).data;\n}\n\nasync function searchUser(username: string): Promise<User[]> {\n  return (await getApiInstance().get(`auth/search/?username=${username}`)).data;\n}\n\n// as we do same for both login and register for now\n// writing a single function to pass it there\nconst saveTokenAndGetUserDetails = async (\n  tokens: TokenReponse\n): Promise<AuthInfo> => {\n  // for further querying\n  setAccessToken(tokens.access);\n\n  // for storing login session\n  setToken(Token.AcessToken, tokens.access);\n  setToken(Token.RefreshToken, tokens.refresh);\n\n  return await getUserDetails();\n};\n\nexport const getAuthActions = (\n  setAuthInfo: Dispatch<SetStateAction<AuthInfo>>\n): AuthActions => ({\n  login: async (email: string, password: string) => {\n    const tokens = await loginUser(email, password);\n    const authInfo = await saveTokenAndGetUserDetails(tokens);\n    setAuthInfo({ ...authInfo, status: AuthStatus.Authenticated });\n  },\n  register: async (username: string, email: string, password: string) => {\n    const tokens = await registerUser(username, email, password);\n    const authInfo = await saveTokenAndGetUserDetails(tokens);\n    setAuthInfo({ ...authInfo, status: AuthStatus.Authenticated });\n  },\n  authenticate: async (accessToken: string | null) => {\n    if (accessToken === null) {\n      setAuthInfo((info) => ({ ...info, status: AuthStatus.NotAuthenticated }));\n      return;\n    }\n    try {\n      setAuthInfo((info) => ({\n        ...info,\n        status: AuthStatus.AuthenticationLoading,\n      }));\n      setAccessToken(accessToken);\n      const authInfo = await getUserDetails();\n      setAuthInfo({ ...authInfo, status: AuthStatus.Authenticated });\n    } catch (err) {\n      console.error(err);\n      try {\n        const refresh = getToken(Token.RefreshToken);\n        if (refresh === null) return;\n        // access token may be expired so refresh and try again once more\n        const newAccessToken = await refreshToken(refresh);\n        setAccessToken(newAccessToken.access);\n        const authInfo = await getUserDetails();\n        setAuthInfo({ ...authInfo, status: AuthStatus.Authenticated });\n      } catch (err) {\n        console.error(err);\n        // if we still get error\n        // refresh token is not valid\n        setAuthInfo((info) => ({\n          ...info,\n          status: AuthStatus.NotAuthenticated,\n        }));\n      }\n    }\n  },\n  logout: () => {\n    setAccessToken(\"\");\n    removeToken(Token.AcessToken);\n    removeToken(Token.RefreshToken);\n    setAuthInfo({ status: AuthStatus.NotAuthenticated });\n  },\n});\n\n// cancel token storage\nlet cancelTokenSource: CancelTokenSource | undefined;\n\ninterface SearchResult {\n  id: number;\n  title: string;\n  description: string;\n}\n\nexport function useUserSearch() {\n  const { id } = useAuth();\n  const { selectRoom, addRoom, getRoomIfAlreadyThere } = useChat();\n  const [searchText, setSearchText] = useState<string>(\"\");\n  const [searchLoading, setSearchLoading] = useState<boolean>(false);\n  const [searchResult, setSearchResult] = useState<SearchResult[]>([]);\n\n  const getUsers = async (query: string): Promise<SearchResult[]> => {\n    // if already a request is there cancel it\n    if (cancelTokenSource !== undefined) cancelTokenSource.cancel();\n\n    cancelTokenSource = axios.CancelToken.source();\n    const users = await searchUser(query);\n    return users\n      .filter((user) => user.id !== id)\n      .map((user) => ({\n        id: user.id,\n        title: user.username,\n        description: user.email,\n      }));\n  };\n\n  const onSearchChange = async (\n    e: MouseEvent<HTMLElement>,\n    data: SearchProps\n  ) => {\n    if (data.value) {\n      setSearchText(data.value);\n      setSearchLoading(true);\n      const users = await getUsers(data.value);\n      setSearchResult(users);\n      setSearchLoading(false);\n    } else setSearchText(\"\");\n  };\n\n  const onResultSelect = async (\n    event: MouseEvent<HTMLDivElement>,\n    data: SearchResultData\n  ) => {\n    const user = data.result.id as number;\n    const room = getRoomIfAlreadyThere(user);\n    if (room === undefined) {\n      const newRoom = await addNewRoom([user]);\n      addRoom(newRoom);\n    } else {\n      selectRoom(room.id);\n    }\n    setSearchResult([]);\n    setSearchText(\"\");\n  };\n\n  return {\n    onSearchChange,\n    onResultSelect,\n    searchLoading,\n    searchResult,\n    searchText,\n  };\n}\n","import { createContext, ReactChild, useContext, useState } from \"react\";\nimport { getAuthActions } from \"./auth-services\";\n\nexport enum AuthStatus {\n  NotAuthenticated = \"NOT_AUTHENTICATED\",\n  Authenticated = \"AUTHENTICATED\",\n  AuthenticationLoading = \"AUTHENTICATION_LOADING\",\n}\nexport interface AuthInfo {\n  id?: number;\n  username?: string;\n  email?: string;\n  status: AuthStatus;\n}\n\nexport interface AuthActions {\n  register: (\n    username: string,\n    email: string,\n    password: string\n  ) => Promise<void>;\n  login: (email: string, password: string) => Promise<void>;\n  authenticate: (accessToken: string | null) => Promise<void>;\n  logout: () => void;\n}\n\nexport type AuthContextType = AuthInfo & AuthActions;\n\nconst AuthContext = createContext<AuthContextType>({} as any);\n\nexport const AuthProvider = ({ children }: { children: ReactChild }) => {\n  const [authInfo, setAuthInfo] = useState<AuthInfo>({\n    status: AuthStatus.AuthenticationLoading,\n  });\n\n  const contextValue: AuthContextType = {\n    ...authInfo,\n    ...getAuthActions(setAuthInfo),\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>{children}</AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n","import { useRef } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { Login } from \"../../components/loginPage/Login\";\nimport { AuthLayout } from \"../../layouts/AuthLayout\";\nimport { useAuth } from \"../../services/auth/AuthContext\";\n\nfunction LoginContainer() {\n  const { login } = useAuth();\n  const navigate = useNavigate();\n  const formControlRef = useRef<{\n    setError: (errors: Record<string, string>) => void;\n    setLoading: (loading: boolean) => void;\n  }>();\n\n  const loginUser = async (email: string, password: string) => {\n    try {\n      formControlRef.current?.setLoading(true);\n      formControlRef.current?.setError({});\n      await login(email, password);\n      navigate(\"/\");\n    } catch (err) {\n      formControlRef.current?.setError({ general: \"Invalid Credentials\" });\n      console.error(err);\n    } finally {\n      formControlRef.current?.setLoading(false);\n    }\n  };\n\n  return (\n    <AuthLayout\n      heading=\"Login\"\n      cardContent={<Login ctrlRef={formControlRef} onSubmit={loginUser} />}\n      extra={\n        <>\n          Don't have an account? <Link to=\"/register\">Register</Link>\n        </>\n      }\n    />\n  );\n}\n\nexport { LoginContainer };\n","import { MutableRefObject, useImperativeHandle, useState } from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\n\ninterface Props {\n  ctrlRef: MutableRefObject<\n    | {\n        setError: (error: Record<string, string>) => void;\n        setLoading: (loading: boolean) => void;\n      }\n    | undefined\n  >;\n  onSubmit: (username: string, email: string, password: string) => void;\n}\n\nfunction Register({ ctrlRef, onSubmit }: Props) {\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState<Record<string, string>>({});\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const onFormSubmit = async () => {\n    setPassword(\"\");\n    await onSubmit(username, email, password);\n  };\n\n  useImperativeHandle(\n    ctrlRef,\n    () => ({\n      setError,\n      setLoading,\n    }),\n    []\n  );\n\n  return (\n    <Form onSubmit={onFormSubmit}>\n      <Form.Input\n        required\n        label=\"UserName\"\n        placeholder=\"username\"\n        type=\"text\"\n        icon=\"user\"\n        iconPosition=\"left\"\n        value={username}\n        onChange={(e) => setUsername(e.target.value)}\n        error={error.username}\n      />\n      <Form.Input\n        required\n        label=\"Email\"\n        type=\"email\"\n        inputmode=\"email\"\n        placeholder=\"email\"\n        icon=\"mail\"\n        iconPosition=\"left\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        error={error.email}\n      />\n      <Form.Input\n        required\n        label=\"Password\"\n        placeholder=\"password\"\n        type=\"password\"\n        icon=\"key\"\n        iconPosition=\"left\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        error={error.password}\n      />\n      <Button type=\"submit\" primary loading={loading} disabled={loading}>\n        Sign Up\n      </Button>\n    </Form>\n  );\n}\n\nexport { Register };\n","import { useRef } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { Register } from \"../../components/registerPage/Register\";\nimport { AuthLayout } from \"../../layouts/AuthLayout\";\nimport { useAuth } from \"../../services/auth/AuthContext\";\n\nfunction RegisterContainer() {\n  const { register } = useAuth();\n  const navigate = useNavigate();\n  const errorControlRef = useRef<{\n    setError: (error: Record<string, string>) => void;\n    setLoading: (loading: boolean) => void;\n  }>();\n\n  const registerUser = async (\n    username: string,\n    email: string,\n    password: string\n  ) => {\n    try {\n      errorControlRef.current?.setLoading(true);\n      errorControlRef.current?.setError({});\n      await register(username, email, password);\n      navigate(\"/\");\n    } catch (err) {\n      errorControlRef.current?.setError((err as any).response.data);\n      console.error(err);\n    } finally {\n      errorControlRef.current?.setLoading(false);\n    }\n  };\n\n  return (\n    <AuthLayout\n      heading=\"Register\"\n      cardContent={\n        <Register ctrlRef={errorControlRef} onSubmit={registerUser} />\n      }\n      extra={\n        <>\n          Already have an account? <Link to=\"/login\">Login</Link>\n        </>\n      }\n    />\n  );\n}\n\nexport { RegisterContainer };\n","import { Dimmer, Loader } from \"semantic-ui-react\";\n\nfunction AppLoader() {\n  return (\n    <Dimmer active inverted>\n      <Loader />\n    </Dimmer>\n  );\n}\n\nexport { AppLoader };\n","import { Navigate } from \"react-router\";\nimport { AuthStatus, useAuth } from \"../../services/auth/AuthContext\";\n\ninterface Props {\n  element: JSX.Element;\n  loggedIn?: boolean;\n}\n\nfunction RedirectifNeeded({ element, loggedIn }: Props) {\n  const { status } = useAuth();\n\n  if (status === AuthStatus.Authenticated) {\n    if (loggedIn === true) return element;\n    else return <Navigate replace to=\"/\" />;\n  } else if (status === AuthStatus.NotAuthenticated) {\n    if (loggedIn !== true) return element;\n    else return <Navigate replace to=\"/login\" />;\n  }\n\n  // never gonna hit here but for ts\n  return <Navigate replace to=\"/login\" />;\n}\n\nexport { RedirectifNeeded };\n","import { memo, useEffect, useRef, useState } from \"react\";\nimport {\n  Button,\n  GridColumn,\n  Header,\n  Icon,\n  Input,\n  Segment,\n} from \"semantic-ui-react\";\nimport { useAuth } from \"../../services/auth/AuthContext\";\nimport { Message, useChat } from \"../../services/chat/chat-service\";\n\nimport styles from \"./ChatRoom.module.scss\";\n\nconst EmptyChatRoom = () => (\n  <div className={styles.emptyChatRoomContainer}>\n    <Header as=\"h2\" icon>\n      <Icon name=\"user\" />\n      Select a Friend to Chat\n      <Header.Subheader>\n        select the friend from the sidebar to chat\n      </Header.Subheader>\n    </Header>\n  </div>\n);\n\nconst ChatList = memo(\n  ({ messages }: { messages: Message[] }) => {\n    const { id } = useAuth();\n    return (\n      <>\n        {messages.map((message) => (\n          <p\n            key={message.id}\n            className={`${styles.chatMessage} ${\n              message.author === id ? styles.ourMessage : \"\"\n            }`}\n          >\n            <span>\n              {message.content}\n              {/* <small>{getTime(message.createdAt)}</small> */}\n            </span>\n          </p>\n        ))}\n      </>\n    );\n  },\n  ({ messages: prevMessages }, { messages: newMessages }) =>\n    prevMessages.length === newMessages.length &&\n    prevMessages[prevMessages.length - 1] ===\n      newMessages[newMessages.length - 1]\n);\n\nfunction ChatRoom() {\n  const bottomRef = useRef<HTMLDivElement>(null);\n  const { selectedRoom, deSelectRoom, addMessage } = useChat();\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  useEffect(() => {\n    if (bottomRef.current !== null) {\n      bottomRef.current.scrollIntoView();\n    }\n  }, [selectedRoom, selectedRoom?.messages]);\n\n  if (selectedRoom === undefined) return <EmptyChatRoom />;\n  return (\n    <GridColumn computer={12} mobile={16}>\n      <Segment className={styles.chatRoomContainer}>\n        <Icon\n          className={styles.backButton}\n          name=\"arrow left\"\n          size=\"big\"\n          onClick={deSelectRoom}\n        />\n        <div className={styles.messagesContainer}>\n          <ChatList messages={selectedRoom.messages} />\n          <div ref={bottomRef} />\n        </div>\n        <Input\n          autoFocus\n          value={newMessage}\n          onKeyPress={(e: any) => {\n            if (e.charCode === 13) {\n              addMessage(e.target.value);\n              setNewMessage(\"\");\n            }\n          }}\n          onChange={(e) => setNewMessage(e.target.value)}\n          label={\n            <Button\n              primary\n              icon\n              active\n              onClick={() => {\n                addMessage(newMessage);\n                setNewMessage(\"\");\n              }}\n            >\n              <Icon name=\"send\" />\n            </Button>\n          }\n          labelPosition=\"right\"\n          placeholder=\"Type anything . . .\"\n        />\n      </Segment>\n    </GridColumn>\n  );\n}\n\nexport { ChatRoom };\n","import { useEffect, useState } from \"react\";\n\nlet prompt: Event | undefined;\n\nexport function useA2HSButton() {\n  const [isPromptVisible, setIsPromptVisible] = useState<boolean>(false);\n\n  useEffect(() => {\n    const savePromptEvent = (event: Event) => {\n      event.preventDefault();\n      prompt = event;\n      setIsPromptVisible(true);\n    };\n\n    window.addEventListener(\"beforeinstallprompt\", savePromptEvent);\n    return () =>\n      window.removeEventListener(\"beforeinstallprompt\", savePromptEvent);\n  }, []);\n\n  useEffect(() => {\n    const removePromptEvent = (event: Event) => {\n      setIsPromptVisible(false);\n      prompt = undefined;\n    };\n\n    window.addEventListener(\"appinstalled\", removePromptEvent);\n    return () => window.removeEventListener(\"appinstalled\", removePromptEvent);\n  }, []);\n\n  const showPrompt = async () => {\n    if (prompt === undefined) return;\n\n    (prompt as any).prompt();\n    const { outcome }: { outcome: string } = await (prompt as any).userChoice;\n    if (outcome === \"accepted\") setIsPromptVisible(false);\n  };\n\n  return {\n    isPromptVisible,\n    showPrompt,\n  };\n}\n","import { Header, Icon, Image, Label, List } from \"semantic-ui-react\";\nimport { getRandomAvatar } from \"../../common/utils\";\nimport { useAuth } from \"../../services/auth/AuthContext\";\nimport { useChat } from \"../../services/chat/chat-service\";\nimport {\n  getRoomDescription,\n  getRoomTitle,\n  sortRoomsByUnreadCount,\n} from \"../../services/chat/chat-utils\";\n\nimport styles from \"./RoomsList.module.scss\";\n\nconst EmptyRoomsList = ({ username }: { username: string }) => (\n  <div className={styles.emptyListContainer}>\n    <Header as=\"h2\" icon>\n      <Icon name=\"hand peace\" />\n      Hii {username}\n      <Header.Subheader>search for admin to chat with me</Header.Subheader>\n    </Header>\n  </div>\n);\n\nconst UnreadCountLabel = ({\n  count,\n  hidden,\n}: {\n  hidden: boolean;\n  count: number;\n}) =>\n  hidden ? null : (\n    <div className={styles.unreadCountContainer}>\n      <Label color=\"red\" floating circular>\n        {count}\n      </Label>\n    </div>\n  );\n\nfunction RoomsList() {\n  const { id, username } = useAuth();\n  const { rooms, selectedRoom, selectRoom } = useChat();\n\n  if (rooms.length === 0 && username !== undefined)\n    return <EmptyRoomsList username={username} />;\n\n  return (\n    <List animated celled size=\"big\" className={styles.roomsList}>\n      {sortRoomsByUnreadCount(rooms).map((room) => (\n        <List.Item\n          key={room.id}\n          onClick={() => selectRoom(room.id)}\n          style={{ padding: 0 }}\n        >\n          <div className={room.id === selectedRoom?.id ? styles.active : \"\"}>\n            <div className={styles.roomItem}>\n              <div className={styles.profilePic}>\n                <Image avatar src={getRandomAvatar(`${room.id}_${id}`)} />\n              </div>\n              <List.Content>\n                <List.Header>{getRoomTitle(room, id)}</List.Header>\n                <List.Description>\n                  {/* TODO: use ellipsis if more than one line */}\n                  <p className={styles.description}>\n                    {getRoomDescription(room)}\n                  </p>\n                </List.Description>\n                {/* not showing count on selected room (hacky fix) */}\n                <UnreadCountLabel\n                  count={room.unreadCount}\n                  hidden={\n                    room.unreadCount === 0 || selectedRoom?.id === room.id\n                  }\n                />\n              </List.Content>\n            </div>\n          </div>\n        </List.Item>\n      ))}\n    </List>\n  );\n}\n\nexport { RoomsList };\n","import {\n  Dropdown,\n  GridColumn,\n  Header,\n  Icon,\n  Image,\n  Search,\n} from \"semantic-ui-react\";\nimport { useUserSearch } from \"../../services/auth/auth-services\";\nimport { useAuth } from \"../../services/auth/AuthContext\";\nimport { useChat } from \"../../services/chat/chat-service\";\nimport { useA2HSButton } from \"../../services/service-worker/add2hs-service\";\nimport { RoomsList } from \"./RoomsList\";\n\nimport styles from \"./SideBar.module.scss\";\n\nconst Add2HSButton = () => {\n  const { isPromptVisible, showPrompt } = useA2HSButton();\n  if (!isPromptVisible) return null;\n\n  return (\n    <Dropdown.Item onClick={showPrompt}>\n      <Icon name=\"download\" />\n      Install\n    </Dropdown.Item>\n  );\n};\n\ninterface DropDownProps {\n  logout: () => void;\n}\n\nconst DropDownOptions = ({ logout }: DropDownProps) => (\n  <Dropdown simple direction=\"left\" icon=\"ellipsis vertical\">\n    <Dropdown.Menu>\n      <Dropdown.Item onClick={logout}>\n        <Icon name=\"power off\" />\n        Logout\n      </Dropdown.Item>\n      <Add2HSButton />\n    </Dropdown.Menu>\n  </Dropdown>\n);\n\nfunction SideBar() {\n  const { username, logout } = useAuth();\n  const {\n    onResultSelect,\n    onSearchChange,\n    searchLoading,\n    searchResult,\n    searchText,\n  } = useUserSearch();\n  const { selectedRoom } = useChat();\n\n  return (\n    <GridColumn computer={4} mobile={16}>\n      <div\n        className={`${styles.sideBarContainer} ${\n          selectedRoom ? styles.hidden : \"\"\n        }`}\n      >\n        <div className={styles.headerContainer}>\n          <Header as=\"h1\">\n            <Image circular src=\"/logo.png\" className={styles.headerLogo} />\n            <Header.Content>\n              G Chat\n              <Header.Subheader>{username}</Header.Subheader>\n            </Header.Content>\n          </Header>\n          <DropDownOptions logout={logout} />\n        </div>\n        <Search\n          placeholder=\"Search User . . .\"\n          loading={searchLoading}\n          onResultSelect={onResultSelect}\n          onSearchChange={onSearchChange}\n          results={searchResult}\n          value={searchText}\n        />\n        <RoomsList />\n      </div>\n    </GridColumn>\n  );\n}\n\nexport { SideBar };\n","import { Grid, GridRow } from \"semantic-ui-react\";\nimport { ChatRoom } from \"./ChatRoom\";\nimport { SideBar } from \"./SideBar\";\n\nfunction Home() {\n  return (\n    <Grid columns=\"two\" divided>\n      <GridRow>\n        <SideBar />\n        <ChatRoom />\n      </GridRow>\n    </Grid>\n  );\n}\n\nexport { Home };\n","import { useEffect } from \"react\";\nimport { Home } from \"../../components/home/Home\";\nimport { useChat, useChatPoller } from \"../../services/chat/chat-service\";\nimport { useServiceWorker } from \"../../services/service-worker/service-worker-service\";\n\nfunction HomeContainer() {\n  useChatPoller();\n  useServiceWorker();\n  const { resetStates } = useChat();\n\n  // cleanup function when user logout\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => resetStates, []);\n\n  return <Home />;\n}\n\nexport { HomeContainer };\n","import { useEffect } from \"react\";\nimport { AuthStatus, useAuth } from \"../auth/AuthContext\";\n\nexport function useServiceWorker() {\n  const { status } = useAuth();\n\n  useEffect(() => {\n    if (status !== AuthStatus.Authenticated) return;\n    if (!(\"serviceWorker\" in navigator)) return;\n\n    const workerFileUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n    navigator.serviceWorker.register(workerFileUrl);\n  }, [status]);\n}\n","import \"semantic-ui-css/semantic.min.css\";\nimport { Route, Routes, BrowserRouter as Router } from \"react-router-dom\";\nimport { LoginContainer } from \"./containers/login/LoginContainer\";\nimport { RegisterContainer } from \"./containers/register/RegisterContainer\";\nimport { useEffect } from \"react\";\nimport { getToken, Token } from \"./common/tokenLocalStorage\";\nimport { AuthStatus, useAuth } from \"./services/auth/AuthContext\";\nimport { AppLoader } from \"./components/common/AppLoader\";\nimport { RedirectifNeeded } from \"./components/common/RedirectifNeeded\";\nimport { HomeContainer } from \"./containers/home/HomeContainer\";\n\nfunction App() {\n  const { authenticate, status } = useAuth();\n\n  useEffect(() => {\n    const token = getToken(Token.AcessToken);\n    authenticate(token);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (status === AuthStatus.AuthenticationLoading) return <AppLoader />;\n\n  return (\n    <Router>\n      <Routes>\n        <Route\n          path=\"/login\"\n          element={<RedirectifNeeded element={<LoginContainer />} />}\n        />\n        <Route\n          path=\"/register\"\n          element={<RedirectifNeeded element={<RegisterContainer />} />}\n        />\n        <Route\n          path=\"/\"\n          element={<RedirectifNeeded element={<HomeContainer />} loggedIn />}\n        />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport App from \"./App\";\nimport { AuthProvider } from \"./services/auth/AuthContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <AuthProvider>\n        <App />\n      </AuthProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"emptyListContainer\":\"RoomsList_emptyListContainer__33yxa\",\"roomsList\":\"RoomsList_roomsList__31XFJ\",\"roomItem\":\"RoomsList_roomItem__2X1gb\",\"active\":\"RoomsList_active__2zITE\",\"profilePic\":\"RoomsList_profilePic__bFvVP\",\"description\":\"RoomsList_description__3Njkr\",\"unreadCountContainer\":\"RoomsList_unreadCountContainer__2Um04\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"emptyChatRoomContainer\":\"ChatRoom_emptyChatRoomContainer__1dP8s\",\"chatRoomContainer\":\"ChatRoom_chatRoomContainer__ChMZ0\",\"backButton\":\"ChatRoom_backButton__2eVk_\",\"messagesContainer\":\"ChatRoom_messagesContainer__1A1r9\",\"chatMessage\":\"ChatRoom_chatMessage__237QU\",\"ourMessage\":\"ChatRoom_ourMessage__383Bd\"};"],"sourceRoot":""}